"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI Mockup Generator
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Streamlit –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""
import streamlit as st
import os
import json
from datetime import datetime, timedelta
from PIL import Image
import time
from typing import Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Streamlit
from config import get_config, STREAMLIT_PORT, STREAMLIT_HOST, SERVER_STORAGE_ENABLED, FTP_ENABLED
from auth import is_authenticated, login_form, logout_button, require_auth, get_user_info
from mockup_generator import MockupGenerator
from batch_processor import BatchProcessor

# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = get_config()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="AI Mockup Generator",
    page_icon="",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ CSS —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏ –∏ —Ñ–æ–Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
st.markdown("""
<style>
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ */
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    
    /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */
    .stSelectbox > div > div {
        margin-bottom: 0.5rem;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */
    .stButton > button {
        height: 2.5rem;
        font-size: 0.9rem;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */
    .stImage > img {
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π */
    .stTextArea > div > div > textarea {
        font-size: 0.9rem;
    }
    
    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –±–ª–æ–∫–æ–≤ */
    .stContainer {
        background: #f8f9fa !important;
        padding: 1.5rem !important;
        border-radius: 0.5rem !important;
        margin: 1rem 0 !important;
        border: 1px solid #e9ecef !important;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö */
    .stContainer h3 {
        color: #495057 !important;
        margin-bottom: 1.5rem !important;
        font-weight: 600 !important;
    }
    
    /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */
    .stContainer .stSelectbox,
    .stContainer .stTextInput,
    .stContainer .stTextArea,
    .stContainer .stCheckbox,
    .stContainer .stFileUploader {
        margin-bottom: 1rem !important;
    }
    
    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π */
    .stContainer hr {
        margin: 1.5rem 0 !important;
    }
    
    /* –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ */
    .stColumn {
        padding: 0 0.5rem !important;
    }
    
    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
    .main .block-container {
        padding-top: 2rem !important;
        padding-bottom: 2rem !important;
    }
    
    
    /* –ö–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–∞ */
    .stButton > button[kind="primary"] {
        background-color: #6c757d !important;
        color: white !important;
        border: 1px solid #6c757d !important;
        font-weight: 600 !important;
        border-radius: 0.5rem !important;
    }
    
    .stButton > button[kind="secondary"] {
        background-color: #f8f9fa !important;
        color: #6c757d !important;
        border: 1px solid #e9ecef !important;
        font-weight: 500 !important;
        border-radius: 0.5rem !important;
    }
    
    .stButton > button:hover {
        background-color: #5a6268 !important;
        color: white !important;
        border-color: #5a6268 !important;
        transform: none !important;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤
@st.cache_resource
def get_mockup_generator():
    return MockupGenerator()

@st.cache_resource
def get_batch_processor():
    return BatchProcessor()

# –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è BatchProcessor
def clear_batch_processor_cache():
    get_batch_processor.clear()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if not is_authenticated():
        login_form()
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if "regenerate_params" in st.session_state:
        regenerate_params = st.session_state.regenerate_params
        regenerate_mockup_dynamically(
            regenerate_params["mockup_index"],
            regenerate_params["original_mockup"],
            regenerate_params["original_result"],
            regenerate_params["container_key"]
        )
        # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        del st.session_state.regenerate_params
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        st.rerun()
        return
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–∞–ø–æ–≤
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("### Headcorn Mockup")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
    col1, col2 = st.columns([4, 1])
    with col1:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if is_authenticated():
            user_info = get_user_info()
            if user_info:
                st.caption(f"üë§ {user_info['name']} ({user_info['email']})")
    with col2:
        logout_button()
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    st.markdown("---")
    st.markdown("### –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏
    col1, col2, col3 = st.columns(3)
    
    with col1:
        single_type = "primary" if st.session_state.get('mode', 'single') == 'single' else "secondary"
        if st.button("–û–¥–∏–Ω–æ—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", key="single_mode", use_container_width=True, type=single_type):
            st.session_state.mode = 'single'
            st.rerun()
    
    with col2:
        batch_type = "primary" if st.session_state.get('mode', 'single') == 'batch' else "secondary"
        if st.button("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", key="batch_mode", use_container_width=True, type=batch_type):
            st.session_state.mode = 'batch'
            st.rerun()
    
    with col3:
        creative_type = "primary" if st.session_state.get('mode', 'single') == 'creative' else "secondary"
        if st.button("–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", key="creative_mode", use_container_width=True, type=creative_type):
            st.session_state.mode = 'creative'
            st.rerun()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
    mode = st.session_state.get('mode', 'single')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if mode == 'single':
        single_generation_interface()
    elif mode == 'batch':
        batch_processing_interface()
    else:
        creative_generation_interface()

def single_generation_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–∞–ø–æ–≤"""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
    if "regenerate_params" in st.session_state:
        regenerate_params = st.session_state.regenerate_params
        mockup_index = regenerate_params["mockup_index"]
        
        st.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞–ø–∞ {mockup_index + 1}...")
        
        with st.spinner("–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞–ø–∞ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏..."):
            try:
                generator = get_mockup_generator()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                original_result = regenerate_params["original_result"]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                mockup_style = original_result.get("mockup_style", "modern")
                logo_application = original_result.get("logo_application", "embroidery")
                custom_prompt = original_result.get("custom_prompt", "")
                product_color = original_result.get("product_color", "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ")
                product_angle = original_result.get("product_angle", "—Å–ø–µ—Ä–µ–¥–∏")
                logo_position = original_result.get("logo_position", "—Ü–µ–Ω—Ç—Ä")
                logo_size = original_result.get("logo_size", "—Å—Ä–µ–¥–Ω–∏–π")
                logo_color = original_result.get("logo_color", "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–æ–∫–∞–ø —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                new_result = generator.generate_mockup(
                    st.session_state.product_image, st.session_state.logo_image,
                    mockup_style, logo_application, custom_prompt, product_color,
                    product_angle, logo_position, logo_size, logo_color
                )
                
                # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–∫–∞–ø –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                if new_result and "mockups" in new_result and "gemini_mockups" in new_result["mockups"]:
                    new_mockups = new_result["mockups"]["gemini_mockups"]
                    if new_mockups and len(new_mockups) > 0:
                        # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–∫–∞–ø
                        original_result["mockups"]["gemini_mockups"][mockup_index] = new_mockups[0]
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state
                        st.session_state.last_result = original_result
                        st.success(f"‚úÖ –ú–æ–∫–∞–ø {mockup_index + 1} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω!")
                
                # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                del st.session_state.regenerate_params
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è: {e}")
                del st.session_state.regenerate_params
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if "last_result" in st.session_state:
            display_results(st.session_state.last_result)
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö —Å —Ñ–æ–Ω–æ–≤—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
    with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=True):
        col1, col2, col3 = st.columns(3)
    
    with col1:
        # –ë–ª–æ–∫ "–¢–æ–≤–∞—Ä" —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ–Ω–æ–º
        with st.container():
            st.markdown("### –¢–æ–≤–∞—Ä")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            product_file = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–æ–≤–∞—Ä",
                type=['jpg', 'jpeg', 'png', 'webp'],
                key="product"
            )
            
            if product_file:
                product_image = Image.open(product_file)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
                if product_image.mode in ('RGBA', 'LA', 'P'):
                    from image_processor import ImageProcessor
                    processor = ImageProcessor()
                    product_image = processor.convert_to_rgb(product_image)
                st.session_state.product_image = product_image
                preview_size = (120, 120)
                preview_image = product_image.copy()
                preview_image.thumbnail(preview_size, Image.LANCZOS)
                st.image(preview_image, caption="–¢–æ–≤–∞—Ä", width=120)
                st.caption(f"{product_image.size[0]}x{product_image.size[1]}")
            elif "product_image" in st.session_state:
                product_image = st.session_state.product_image
                preview_size = (120, 120)
                preview_image = product_image.copy()
                preview_image.thumbnail(preview_size, Image.LANCZOS)
                st.image(preview_image, caption="–¢–æ–≤–∞—Ä", width=120)
                st.caption(f"{product_image.size[0]}x{product_image.size[1]}")
            
            st.markdown("---")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–≤–∞—Ä–∞
            mockup_style = st.selectbox(
                "–°—Ç–∏–ª—å",
                ["–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π", "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π", "–í –¥–∏–Ω–∞–º–∏–∫–µ"],
                help="–°—Ç–∏–ª—å –º–æ–∫–∞–ø–∞"
            )
            
            product_color = st.text_input(
                "–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞",
                value="–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ",
                help="–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞"
            )
            
            product_angle = st.selectbox(
                "–†–∞–∫—É—Ä—Å",
                ["–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ", "—Å–ø–µ—Ä–µ–¥–∏", "–≤ –ø–æ–ª—É–æ–±–æ—Ä–æ—Ç", "—Å–≤–µ—Ä—Ö—É", "–≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ", "—Å–±–æ–∫—É", "–ø–æ–¥ —É–≥–ª–æ–º"],
                help="–£–≥–æ–ª —Å—ä–µ–º–∫–∏"
            )
    
    with col2:
        # –ë–ª–æ–∫ "–õ–æ–≥–æ—Ç–∏–ø" —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ–Ω–æ–º
        with st.container():
            st.markdown("### –õ–æ–≥–æ—Ç–∏–ø")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
            logo_file = st.file_uploader(
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø",
                type=['jpg', 'jpeg', 'png', 'webp'],
                key="logo"
            )
            
            if logo_file:
                logo_image = Image.open(logo_file)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
                if logo_image.mode in ('RGBA', 'LA', 'P'):
                    from image_processor import ImageProcessor
                    processor = ImageProcessor()
                    logo_image = processor.convert_to_rgb(logo_image)
                st.session_state.logo_image = logo_image
                preview_size = (120, 120)
                preview_logo = logo_image.copy()
                preview_logo.thumbnail(preview_size, Image.LANCZOS)
                st.image(preview_logo, caption="–õ–æ–≥–æ—Ç–∏–ø", width=120)
                st.caption(f"{logo_image.size[0]}x{logo_image.size[1]}")
            elif "logo_image" in st.session_state:
                logo_image = st.session_state.logo_image
                preview_size = (120, 120)
                preview_logo = logo_image.copy()
                preview_logo.thumbnail(preview_size, Image.LANCZOS)
                st.image(preview_logo, caption="–õ–æ–≥–æ—Ç–∏–ø", width=120)
                st.caption(f"{logo_image.size[0]}x{logo_image.size[1]}")
            
            st.markdown("---")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
            logo_application_options = ["–≤—ã—à–∏–≤–∫–∞", "–ø–µ—á–∞—Ç—å", "—Ç–∫–∞—á–µ—Å—Ç–≤–æ", "—Ç–∏—Å–Ω–µ–Ω–∏–µ", "—Å—É–±–ª–∏–º–∞—Ü–∏—è", "—Å–∏–ª–∏–∫–æ–Ω", "—Ç–µ—Ä–º–æ–ø–µ—Ä–µ–Ω–æ—Å", "—à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è", "—Ü–∏—Ñ—Ä–æ–≤–∞—è –ø–µ—á–∞—Ç—å", "–ª–∞–∑–µ—Ä–Ω–∞—è –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∞", "–ø–∞—Ç—á"]
            logo_application = st.selectbox(
                "–¢–∏–ø –Ω–∞–Ω–µ—Å–µ–Ω–∏—è",
                logo_application_options,
                help="–¢–∏–ø –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞"
            )
            
            custom_application = st.text_input(
                "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–∏–ø –Ω–∞–Ω–µ—Å–µ–Ω–∏—è",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∞–ø–ø–ª–∏–∫–∞—Ü–∏—è, –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∞",
                help="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–∏–ø –Ω–∞–Ω–µ—Å–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ"
            )
            
            if custom_application.strip():
                logo_application = custom_application.strip()
                logo_application_from_select = None
            else:
                logo_application_from_select = logo_application
            
            logo_position = st.selectbox(
                "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                ["—Ü–µ–Ω—Ç—Ä", "–≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª", "–≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª", "–Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª", "–Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª", "–ª–µ–≤—ã–π –±–æ–∫", "–ø—Ä–∞–≤—ã–π –±–æ–∫", "–≤–µ—Ä—Ö", "–Ω–∏–∑"],
                help="–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞"
            )
            
            logo_size = st.selectbox(
                "–†–∞–∑–º–µ—Ä",
                ["–æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π", "–º–∞–ª–µ–Ω—å–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–±–æ–ª—å—à–æ–π", "–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π"],
                help="–†–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞"
            )
            
            logo_color = st.selectbox(
                "–¶–≤–µ—Ç",
                ["–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ", "—á–µ—Ä–Ω—ã–π", "–±–µ–ª—ã–π"],
                help="–¶–≤–µ—Ç –ª–æ–≥–æ—Ç–∏–ø–∞"
            )
    
    with col3:
        # –ë–ª–æ–∫ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ–Ω–æ–º
        with st.container():
            st.markdown("### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            pattern_file = st.file_uploader(
                "–ü–∞—Ç—Ç–µ—Ä–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                type=['jpg', 'jpeg', 'png', 'webp'],
                key="pattern",
                help="–ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä"
            )
            
            if pattern_file:
                pattern_image = Image.open(pattern_file)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
                if pattern_image.mode in ('RGBA', 'LA', 'P'):
                    from image_processor import ImageProcessor
                    processor = ImageProcessor()
                    pattern_image = processor.convert_to_rgb(pattern_image)
                st.session_state.pattern_image = pattern_image
                preview_size = (120, 120)
                preview_pattern = pattern_image.copy()
                preview_pattern.thumbnail(preview_size, Image.LANCZOS)
                st.image(preview_pattern, caption="–ü–∞—Ç—Ç–µ—Ä–Ω", width=120)
                st.caption(f"{pattern_image.size[0]}x{pattern_image.size[1]}")
            elif "pattern_image" in st.session_state:
                pattern_image = st.session_state.pattern_image
                preview_size = (120, 120)
                preview_pattern = pattern_image.copy()
                preview_pattern.thumbnail(preview_size, Image.LANCZOS)
                st.image(preview_pattern, caption="–ü–∞—Ç—Ç–µ—Ä–Ω", width=120)
                st.caption(f"{pattern_image.size[0]}x{pattern_image.size[1]}")
            
            st.markdown("---")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            add_tag = st.checkbox("–î–æ–±–∞–≤–∏—Ç—å –±–∏—Ä–∫—É", value=False, help="–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏–∫–µ—Ç–∫—É –∏–ª–∏ –±–∏—Ä–∫—É —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∫ —Ç–æ–≤–∞—Ä—É")
            add_person = st.checkbox("–î–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞", value=False, help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–æ–º")
            
            st.markdown("**–î–æ–ø. –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ**")
            add_badge = st.checkbox("–î–æ–±–∞–≤–∏—Ç—å —à–∏–ª—å–¥–∏–∫", value=False, help="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —à–∏–ª—å–¥–∏–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º")
            
            st.markdown("**–î–µ—Ç–∞–ª–∏**")
            custom_prompt = st.text_area(
                "–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: '–ª–æ–≥–æ—Ç–∏–ø –≤ –ø—Ä–∞–≤–æ–º —É–≥–ª—É', '–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–Ω–∏'",
                height=60,
                help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"
            )
    
    # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if ("product_image" in st.session_state and "logo_image" in st.session_state):
        st.markdown("---")
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–∫–∞–ø", type="primary", use_container_width=True):
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–∞–ø–æ–≤..."):
                    try:
                        generator = get_mockup_generator()
                        
                        # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∫–ª—é—á–∏
                        logo_application_translation = {
                            "–≤—ã—à–∏–≤–∫–∞": "embroidery",
                            "–ø–µ—á–∞—Ç—å": "printing", 
                            "—Ç–∫–∞—á–µ—Å—Ç–≤–æ": "woven",
                            "—Ç–∏—Å–Ω–µ–Ω–∏–µ": "embossed",
                            "—Å—É–±–ª–∏–º–∞—Ü–∏—è": "sublimation",
                            "—Å–∏–ª–∏–∫–æ–Ω": "silicone",
                            "—Ç–µ—Ä–º–æ–ø–µ—Ä–µ–Ω–æ—Å": "heat_transfer",
                            "—à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è": "screen_print",
                            "—Ü–∏—Ñ—Ä–æ–≤–∞—è –ø–µ—á–∞—Ç—å": "digital_print",
                            "–ª–∞–∑–µ—Ä–Ω–∞—è –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∞": "laser_engraving",
                            "–ø–∞—Ç—á": "patch"
                        }
                        
                        # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç–∏–ª–µ–π
                        style_translation = {
                            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π": "modern",
                            "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π": "luxury",
                            "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π": "minimal",
                            "–í –¥–∏–Ω–∞–º–∏–∫–µ": "dynamic"
                        }
                        
                        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∫–ª—é—á
                        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
                        if custom_application.strip():
                            logo_application_key = custom_application.strip()  # –ö–∞—Å—Ç–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
                        else:
                            logo_application_key = logo_application_translation.get(logo_application, "embroidery")
                        mockup_style_key = style_translation.get(mockup_style, "modern")
                        
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
                        extended_prompt = custom_prompt
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∫—É—Ä—Å–∞
                        if product_angle != "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ":
                            extended_prompt += " –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã, –ª—é–¥–µ–π, –º–µ–±–µ–ª—å –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä/—Ç–æ–≤–∞—Ä—ã –Ω–∞ —á–∏—Å—Ç–æ–º —Ñ–æ–Ω–µ."
                        
                        if add_tag:
                            extended_prompt += " –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏–∫–µ—Ç–∫—É –∏–ª–∏ –±–∏—Ä–∫—É —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∫ —Ç–æ–≤–∞—Ä—É. –≠—Ç–∏–∫–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
                        if add_person:
                            extended_prompt += " –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–æ–º, —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä."
                        if add_badge:
                            extended_prompt += " –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —à–∏–ª—å–¥–∏–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –Ω–∞ —Ç–æ–≤–∞—Ä."
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                        if "pattern_image" in st.session_state:
                            extended_prompt += " –°–æ–∑–¥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º –ø–æ –≤—Å–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞."
                        
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
                        additional_options = []
                        if add_tag:
                            additional_options.append("–±–∏—Ä–∫–∞")
                        if add_person:
                            additional_options.append("—á–µ–ª–æ–≤–µ–∫")
                        if add_badge:
                            additional_options.append("—à–∏–ª—å–¥–∏–∫")
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω
                        if "pattern_image" in st.session_state:
                            additional_options.append("–ø–∞—Ç—Ç–µ—Ä–Ω")
                        
                        if additional_options:
                            st.info(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {', '.join(additional_options)}")
                        
                        if custom_prompt.strip():
                            st.info(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {custom_prompt}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        st.info("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–∞–ø —Å –ø–æ–º–æ—â—å—é AI...")
                        
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
                        product_image = st.session_state.product_image
                        logo_image = st.session_state.logo_image
                        pattern_image = st.session_state.get("pattern_image", None)
                        
                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–∞–ø–æ–≤
                        result = generator.generate_mockups(
                            product_image=product_image,
                            logo_image=logo_image,
                            style=mockup_style_key,
                            logo_application=logo_application_key,
                            custom_prompt=extended_prompt,
                            product_color=product_color,
                            product_angle=product_angle,
                            logo_position=logo_position,
                            logo_size=logo_size,
                            logo_color=logo_color,
                            pattern_image=pattern_image
                        )
                        
                        if result["status"] == "success":
                            st.success(f"‚úÖ –ú–æ–∫–∞–ø—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {result['processing_time']:.2f} —Å–µ–∫—É–Ω–¥")
                            
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini, –µ—Å–ª–∏ –µ—Å—Ç—å
                            if "mockups" in result and result["mockups"]:
                                for i, mockup in enumerate(result["mockups"]):
                                    if "text_response" in mockup and mockup["text_response"]:
                                        with st.expander(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini (–º–æ–∫–∞–ø {i+1})"):
                                            st.write(mockup["text_response"])
                            
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            display_results(result)
                            
                        elif result["status"] == "partial_success":
                            st.warning("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–∫–∞–ø—ã")
                            display_results(result)
                            
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–∞–ø–æ–≤")
                            if "text_response" in result:
                                with st.expander("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini"):
                                    st.write(result["text_response"])
                            st.error(result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º fallback –º–æ–∫–∞–ø—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                            if "mockups" in result:
                                display_results(result)
                    
                    except Exception as e:
                        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                        st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    else:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
            
    

def display_results(result: dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
    st.session_state.last_result = result
    st.session_state.last_generation_result = result
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–∫–∞–ø—ã –≤ session_state –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
    if "generated_mockups" not in st.session_state:
        st.session_state.generated_mockups = []
    
    mockups = result.get("mockups", {})
    
    if not mockups:
        st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–∫–∞–ø–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        st.error(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {list(result.keys())}")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–æ–∫–∞–ø—ã –≤ session_state
    if "gemini_mockups" in mockups:
        for mockup in mockups["gemini_mockups"]:
            if "image_data" in mockup:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
                gallery_entry = {
                    "image_data": mockup["image_data"],
                    "metadata": {
                        "mockup_style": result.get("style", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "logo_application": result.get("logo_application", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "logo_placement": result.get("logo_position", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "logo_size": result.get("logo_size", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "logo_color": result.get("logo_color", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "product_color": result.get("product_color", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "product_angle": result.get("product_angle", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "special_requirements": result.get("custom_prompt", "")
                    },
                    "timestamp": time.time(),
                    "description": mockup.get("description", "")
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ session_state (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
                if gallery_entry not in st.session_state.generated_mockups:
                    st.session_state.generated_mockups.append(gallery_entry)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–∫–∞–ø—ã
    display_mockups_dynamically(mockups, result)
    
    # –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã (–≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
    if "gemini_mockups" in mockups:
        for mockup in mockups["gemini_mockups"]:
            if "image_data" in mockup:
                gallery_entry = {
                    "image_data": mockup["image_data"],
                    "metadata": {
                        "style": mockup.get("style", "unknown"),
                        "logo_application": mockup.get("logo_application", "unknown"),
                        "custom_prompt": mockup.get("custom_prompt", ""),
                        "product_color": mockup.get("product_color", "–±–µ–ª—ã–π"),
                        "product_angle": mockup.get("product_angle", "—Å–ø–µ—Ä–µ–¥–∏"),
                        "created_time": time.time()
                    }
                }
                
                # Google Drive –æ—Ç–∫–ª—é—á–µ–Ω
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                upload_to_server(mockup["image_data"], gallery_entry["metadata"], mockup.get("description", ""))
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ FTP –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                upload_to_ftp(mockup["image_data"], gallery_entry["metadata"], mockup.get("description", ""))

def display_mockups_dynamically(mockups: dict, result: dict):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∫–∞–ø–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mockups –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç gemini_mockups
    if not mockups or "gemini_mockups" not in mockups or not mockups["gemini_mockups"]:
        st.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: 'mockups'")
        st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ session_state
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", help="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–æ–∫–∞–ø–∞–º–∏
            keys_to_clear = [
                'last_result', 'mockup_containers', 'generated_mockups',
                'gallery_cache', 'regenerate_params', 'batch_results'
            ]
            for key in keys_to_clear:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ fallback
    fallback_used = mockups.get("fallback_used", False)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if "mockup_containers" not in st.session_state:
        st.session_state.mockup_containers = {}
    
    # Gemini –º–æ–∫–∞–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "gemini_mockups" in mockups:
        gemini_mockups = mockups["gemini_mockups"]
        
        if gemini_mockups:
            for i, mockup in enumerate(gemini_mockups):
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                container_key = f"mockup_{i}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if container_key not in st.session_state.mockup_containers:
                    st.session_state.mockup_containers[container_key] = st.empty()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                mockup_container = st.session_state.mockup_containers[container_key]
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–∫–∞–ø –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                with mockup_container.container():
                    if "description" in mockup:
                        st.write(f"**–í–∞—Ä–∏–∞–Ω—Ç {i+1}:** {mockup['description']}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Gemini
                    if "image_data" in mockup:
                        try:
                            from PIL import Image
                            import io
                            from image_processor import ImageProcessor
                            
                            # image_data —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è bytes –æ—Ç Gemini
                            image_data = mockup["image_data"]
                            image = Image.open(io.BytesIO(image_data))
                            
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
                            if image.mode in ('RGBA', 'LA', 'P'):
                                from image_processor import ImageProcessor
                                processor = ImageProcessor()
                                image = processor.convert_to_rgb(image)
                                # –û–±–Ω–æ–≤–ª—è–µ–º image_data
                                img_byte_arr = io.BytesIO()
                                image.save(img_byte_arr, format='JPEG', quality=95)
                                image_data = img_byte_arr.getvalue()
                            
                            # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                            st.image(image, use_container_width=True)
                            
                            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                                st.download_button(
                                    label="–°–∫–∞—á–∞—Ç—å",
                                    data=image_data,
                                    file_name=f"ai_mockup_{i+1}.jpg",
                                    mime="image/jpeg",
                                    key=f"download_ai_{i+1}",
                                    use_container_width=True
                                )
                            
                            with col2:
                                # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                                if st.button(f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–∫–∞–ø {i+1}", key=f"regenerate_{i+1}", use_container_width=True, help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–∫–∞–ø —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"):
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                                    st.session_state.regenerate_params = {
                                        "mockup_index": i,
                                        "original_mockup": mockup,
                                        "original_result": result,
                                        "container_key": container_key
                                    }
                                    st.rerun()
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                            if "text_response" in mockup and mockup["text_response"]:
                                with st.expander(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini (–º–æ–∫–∞–ø {i+1})"):
                                    st.write(mockup["text_response"])
                        
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–∫–∞–ø–∞ {i+1}: {str(e)}")
    
    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–∫–∞–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "local_mockups" in mockups:
        local_mockups = mockups["local_mockups"]
        
        if local_mockups:
            st.subheader("üè† –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–∫–∞–ø—ã")
            
            for i, mockup in enumerate(local_mockups):
                if "image" in mockup:
                    st.image(mockup["image"], caption=f"–õ–æ–∫–∞–ª—å–Ω—ã–π –º–æ–∫–∞–ø {i+1}", use_container_width=True)
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–∫–∞–ø–æ–≤
                    if "image" in mockup:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL Image –≤ bytes
                        import io
                        img_byte_arr = io.BytesIO()
                        
                        image = mockup["image"]
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGB —Ä–µ–∂–∏–º–µ –¥–ª—è JPEG
                        if image.mode == 'RGBA':
                            # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è RGBA –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                            background = Image.new('RGB', image.size, (255, 255, 255))
                            background.paste(image, mask=image.split()[-1])
                            image = background
                        elif image.mode != 'RGB':
                            image = image.convert('RGB')
                        
                        image.save(img_byte_arr, format='JPEG')
                        img_byte_arr = img_byte_arr.getvalue()
                        
                        st.download_button(
                            label=f"üì• –°–∫–∞—á–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –º–æ–∫–∞–ø {i+1}",
                            data=img_byte_arr,
                            file_name=f"local_mockup_{i+1}.jpg",
                            mime="image/jpeg",
                            key=f"download_local_{i+1}",
                            use_container_width=True
                        )

def regenerate_mockup_dynamically(mockup_index: int, original_mockup: dict, original_result: dict, container_key: str):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞–ø–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    mockup_container = st.session_state.mockup_containers[container_key]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    with mockup_container.container():
        st.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞–ø–∞ {mockup_index + 1}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_text.text("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini...")
            progress_bar.progress(20)
            time.sleep(0.5)
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            generator = get_mockup_generator()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            mockup_style = original_result.get("style", "modern")
            logo_application = original_result.get("logo_application", "embroidery")
            custom_prompt = original_result.get("custom_prompt", "")
            product_color = original_result.get("product_color", "–±–µ–ª—ã–π")
            product_angle = original_result.get("product_angle", "—Å–ø–µ—Ä–µ–¥–∏")
            logo_position = original_result.get("logo_position", "—Ü–µ–Ω—Ç—Ä")
            logo_size = original_result.get("logo_size", "—Å—Ä–µ–¥–Ω–∏–π")
            logo_color = original_result.get("logo_color", "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_text.text("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –º–æ–∫–∞–ø–∞...")
            progress_bar.progress(50)
            time.sleep(0.5)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–æ–∫–∞–ø —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            new_result = generator.generate_mockup(
                st.session_state.product_image, st.session_state.logo_image,
                mockup_style, logo_application, custom_prompt, product_color,
                product_angle, logo_position, logo_size, logo_color
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_text.text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            progress_bar.progress(80)
            time.sleep(0.5)
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–∫–∞–ø –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            if new_result and "mockups" in new_result and "gemini_mockups" in new_result["mockups"]:
                new_mockups = new_result["mockups"]["gemini_mockups"]
                if new_mockups and len(new_mockups) > 0:
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    if "mockups" not in original_result:
                        original_result["mockups"] = {}
                    if "gemini_mockups" not in original_result["mockups"]:
                        original_result["mockups"]["gemini_mockups"] = []
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–∫–∞–ø
                    if mockup_index < len(original_result["mockups"]["gemini_mockups"]):
                        original_result["mockups"]["gemini_mockups"][mockup_index] = new_mockups[0]
                    else:
                        # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –±–æ–ª—å—à–µ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                        original_result["mockups"]["gemini_mockups"].append(new_mockups[0])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º session_state
                    st.session_state.last_result = original_result
                    st.session_state.last_generation_result = original_result
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    status_text.text("üéâ –ú–æ–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω!")
                    progress_bar.progress(100)
                    time.sleep(1)
                    
                    # –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∏ —Å—Ç–∞—Ç—É—Å
                    progress_bar.empty()
                    status_text.empty()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∫–∞–ø–∞
                    update_mockup_display(mockup_index, new_mockups[0], original_result, container_key)
                    
                    st.success(f"‚úÖ –ú–æ–∫–∞–ø {mockup_index + 1} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω!")
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–∫–∞–ø")
            else:
                # Fallback: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if not new_result:
                    st.error("‚ùå –û—à–∏–±–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                elif "mockups" not in new_result:
                    st.error("‚ùå –û—à–∏–±–∫–∞: –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'mockups'")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –º–æ–∫–∞–ø–∞")
        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è: {str(e)}")
            progress_bar.empty()
            status_text.empty()

def update_mockup_display(mockup_index: int, new_mockup: dict, result: dict, container_key: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–∫–∞–ø–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ new_mockup –Ω–µ –ø—É—Å—Ç–æ–π
    if not new_mockup:
        st.error("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –º–æ–∫–∞–ø –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if container_key not in st.session_state.mockup_containers:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_key} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    mockup_container = st.session_state.mockup_containers[container_key]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    with mockup_container.container():
        if "description" in new_mockup:
            st.write(f"**–í–∞—Ä–∏–∞–Ω—Ç {mockup_index+1}:** {new_mockup['description']}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Gemini
        if "image_data" in new_mockup:
            try:
                from PIL import Image
                import io
                from image_processor import ImageProcessor
                
                # image_data —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è bytes –æ—Ç Gemini
                image_data = new_mockup["image_data"]
                image = Image.open(io.BytesIO(image_data))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
                if image.mode in ('RGBA', 'LA', 'P'):
                    processor = ImageProcessor()
                    image = processor.convert_to_rgb(image)
                    # –û–±–Ω–æ–≤–ª—è–µ–º image_data
                    img_byte_arr = io.BytesIO()
                    image.save(img_byte_arr, format='JPEG', quality=95)
                    image_data = img_byte_arr.getvalue()
                
                # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                st.image(image, caption=f"AI-–º–æ–∫–∞–ø {mockup_index+1}", use_container_width=True)
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                col1, col2 = st.columns(2)
                
                with col1:
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    st.download_button(
                        label=f"üì• –°–∫–∞—á–∞—Ç—å AI-–º–æ–∫–∞–ø {mockup_index+1}",
                        data=image_data,
                        file_name=f"ai_mockup_{mockup_index+1}.jpg",
                        mime="image/jpeg",
                        key=f"download_ai_{mockup_index+1}_new",
                        use_container_width=True
                    )
                
                with col2:
                    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                    if st.button(f"üé® –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–∫–∞–ø {mockup_index+1}", key=f"regenerate_{mockup_index+1}_new", use_container_width=True, help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–∫–∞–ø —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"):
                        regenerate_mockup_dynamically(mockup_index, new_mockup, result, container_key)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
                if "text_response" in new_mockup and new_mockup["text_response"]:
                    with st.expander(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini (–º–æ–∫–∞–ø {mockup_index+1})"):
                        st.write(new_mockup["text_response"])
            
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–∫–∞–ø–∞ {mockup_index+1}: {str(e)}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    st.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {result.get('source', 'unknown')} | "
            f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.2f}—Å")

def creative_generation_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π"""
    
    st.markdown("### –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ü–µ–ø—Ü–∏–π")
    st.markdown("–°–æ–∑–¥–∞–π—Ç–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏ –±—Ä–µ–Ω–¥–±—É–∫–∞")
    
    # –¢—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**–¢–æ–≤–∞—Ä**")
        product_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–æ–≤–∞—Ä —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤",
            type=['jpg', 'jpeg', 'png', 'webp'],
            key="creative_product",
            accept_multiple_files=True,
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        if product_files:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            processed_images = []
            for i, product_file in enumerate(product_files):
                product_image = Image.open(product_file)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
                if product_image.mode in ('RGBA', 'LA', 'P'):
                    from image_processor import ImageProcessor
                    processor = ImageProcessor()
                    product_image = processor.convert_to_rgb(product_image)
                processed_images.append(product_image)
            
            st.session_state.creative_product_images = processed_images
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            st.markdown(f"**–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_images)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:**")
            for i, product_image in enumerate(processed_images):
                preview_size = (120, 120)
                preview_image = product_image.copy()
                preview_image.thumbnail(preview_size, Image.LANCZOS)
                st.image(preview_image, caption=f"–†–∞–∫—É—Ä—Å {i+1}", width=120)
                st.caption(f"{product_image.size[0]}x{product_image.size[1]}")
        elif "creative_product_images" in st.session_state:
            processed_images = st.session_state.creative_product_images
            st.markdown(f"**–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_images)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:**")
            for i, product_image in enumerate(processed_images):
                preview_size = (120, 120)
                preview_image = product_image.copy()
                preview_image.thumbnail(preview_size, Image.LANCZOS)
                st.image(preview_image, caption=f"–†–∞–∫—É—Ä—Å {i+1}", width=120)
                st.caption(f"{product_image.size[0]}x{product_image.size[1]}")
    
    with col2:
        st.markdown("**–õ–æ–≥–æ—Ç–∏–ø**")
        logo_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø",
            type=['jpg', 'jpeg', 'png', 'webp'],
            key="creative_logo"
        )
        
        if logo_file:
            logo_image = Image.open(logo_file)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
            if logo_image.mode in ('RGBA', 'LA', 'P'):
                from image_processor import ImageProcessor
                processor = ImageProcessor()
                logo_image = processor.convert_to_rgb(logo_image)
            st.session_state.creative_logo_image = logo_image
            preview_size = (120, 120)
            preview_logo = logo_image.copy()
            preview_logo.thumbnail(preview_size, Image.LANCZOS)
            st.image(preview_logo, caption="–õ–æ–≥–æ—Ç–∏–ø", width=120)
            st.caption(f"{logo_image.size[0]}x{logo_image.size[1]}")
        elif "creative_logo_image" in st.session_state:
            logo_image = st.session_state.creative_logo_image
            preview_size = (120, 120)
            preview_logo = logo_image.copy()
            preview_logo.thumbnail(preview_size, Image.LANCZOS)
            st.image(preview_logo, caption="–õ–æ–≥–æ—Ç–∏–ø", width=120)
            st.caption(f"{logo_image.size[0]}x{logo_image.size[1]}")
    
    with col3:
        st.markdown("**–ë—Ä–µ–Ω–¥–±—É–∫**")
        brandbook_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –±—Ä–µ–Ω–¥–±—É–∫ (PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)",
            type=['pdf', 'jpg', 'jpeg', 'png', 'webp'],
            key="creative_brandbook",
            accept_multiple_files=True,
            help="PDF —Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –±—Ä–µ–Ω–¥–±—É–∫–æ–º"
        )
        
        if brandbook_files:
            # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state, —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(brandbook_files)}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    st.markdown("---")
    st.markdown("### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    custom_prompt = st.text_area(
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π",
        placeholder="–û–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º...",
        key="creative_custom_prompt",
        help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–º–ø—Ç—É"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    st.markdown("---")
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏", key="creative_generate", use_container_width=True, type="primary"):
        if not st.session_state.get('creative_product_images') or not st.session_state.get('creative_logo_image'):
            st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–æ–≤–∞—Ä (—Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é) –∏ –ª–æ–≥–æ—Ç–∏–ø")
            return
        
        # –ë—Ä–µ–Ω–¥–±—É–∫ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        if not brandbook_files:
            st.info("‚ÑπÔ∏è –ë—Ä–µ–Ω–¥–±—É–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –∏—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ—Ç–∏–ø–∞...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        from config import UNIFIED_ANALYSIS_ENABLED
        if UNIFIED_ANALYSIS_ENABLED:
            generate_creative_concepts_optimized(brandbook_files)
        else:
            generate_creative_concepts(brandbook_files)

def search_brand_info_online(logo_image):
    """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ—Ç–∏–ø–∞"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Gemini
        import io
        import base64
        
        logo_buffer = io.BytesIO()
        logo_image.save(logo_buffer, format='JPEG', quality=95)
        logo_base64 = base64.b64encode(logo_buffer.getvalue()).decode()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
        logo_analysis_prompt = """
        üö® –í–ê–ñ–ù–û: –í—Å–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 1024x1024 –ø–∏–∫—Å–µ–ª–µ–π (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ) üö®
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –ª–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ:
        
        1. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)
        2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É –ª–æ–≥–æ—Ç–∏–ø–∞
        3. –û–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç–∏–ª—å –¥–∏–∑–∞–π–Ω–∞ (–º–∏–Ω–∏–º–∞–ª–∏–∑–º, –∫–ª–∞—Å—Å–∏–∫–∞, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, —Ä–µ—Ç—Ä–æ –∏ —Ç.–¥.)
        4. –û—Ü–µ–Ω–∏ –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (—Å–µ—Ä—å–µ–∑–Ω—ã–π, –∏–≥—Ä–∏–≤—ã–π, –ø—Ä–µ–º–∏—É–º, –¥–æ—Å—Ç—É–ø–Ω—ã–π)
        5. –ü—Ä–µ–¥–ª–æ–∂–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –∫ —ç—Ç–æ–º—É –±—Ä–µ–Ω–¥—É
        6. –û–ø—Ä–µ–¥–µ–ª–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –±—Ä–µ–Ω–¥–∞
        7. –ü—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç–∏–ª–∏ –¥–∏–∑–∞–π–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç —ç—Ç–æ–º—É –±—Ä–µ–Ω–¥—É
        
        –û—Ç–≤–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, —á—Ç–æ–±—ã —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Ç–æ–≤–∞—Ä–∞.
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        from gemini_client import GeminiClient
        gemini_client = GeminiClient()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        files_for_analysis = [{
            'data': logo_buffer.getvalue(),
            'mime_type': 'image/jpeg',
            'name': 'logo_analysis.jpg'
        }]
        
        brand_analysis = gemini_client.generate_with_files(logo_analysis_prompt, files_for_analysis)
        
        if brand_analysis:
            return brand_analysis
        else:
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–µ–Ω–¥–µ: {e}")
        return None

def generate_creative_concepts_optimized(brandbook_files):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑)"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ session_state
    product_images = st.session_state.creative_product_images
    logo_image = st.session_state.creative_logo_image
    custom_prompt = st.session_state.get('creative_custom_prompt', '')
    
    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ, –µ—Å–ª–∏ –±—Ä–µ–Ω–¥–±—É–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    brand_analysis = None
    if not brandbook_files:
        st.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–µ–Ω–¥–µ...")
        brand_analysis = search_brand_info_online(logo_image)
        if brand_analysis:
            st.success("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–µ–Ω–¥–µ –Ω–∞–π–¥–µ–Ω–∞")
            with st.expander("üé® –ê–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–∞", expanded=False):
                st.write(brand_analysis)
    
    st.info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä, –±—Ä–µ–Ω–¥ –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        unified_prompt = f"""
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–µ—Ä—á–µ–Ω–¥–∞–π–∑–∏–Ω–≥—É –∏ –¥–∏–∑–∞–π–Ω—É —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–ø–æ–ª–Ω–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Å–æ–∑–¥–∞–π 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
        
        {f"–ê–ù–ê–õ–ò–ó –ë–†–ï–ù–î–ê (–Ω–∞–π–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ):\n{brand_analysis}\n" if brand_analysis else ""}
        
        –ó–ê–î–ê–ß–ò:
        1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–≤–∞—Ä: —Ç–∏–ø, –º–∞—Ç–µ—Ä–∏–∞–ª, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
        2. –ò–∑—É—á–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –º–µ—Ä—á–µ–Ω–¥–∞–π–∑–∏–Ω–≥–µ 2024-2025 –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        3. {f"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ –≤—ã—à–µ" if brand_analysis else "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥–æ—Ç–∏–ø –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Å—Ç–∏–ª—å –±—Ä–µ–Ω–¥–∞"}
        4. {f"–ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±—Ä–µ–Ω–¥–±—É–∫ - –∏–∑—É—á–∏ –µ–≥–æ –∏ –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—Ä–µ–Ω–¥–∞" if brandbook_files else ""}
        5. –°–æ–∑–¥–∞–π 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Ç–æ–≤–∞—Ä–∞
        
        –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–û–ù–¶–ï–ü–¶–ò–Ø–ú:
        - –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏ –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–µ —Å–ª–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–µ
        - –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç –ª–æ–≥–æ—Ç–∏–ø –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ
        - –ù–µ –∏–∑–º–µ–Ω—è—é—Ç —Å–∞–º —Ç–æ–≤–∞—Ä, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞
        - –ö–∞–∂–¥–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞
        - –Ø—Ä–∫–∏–µ, —Ü–µ–ø–ª—è—é—â–∏–µ –∏ –ø—Ä–æ–¥–∞—é—â–∏–µ
        - –£—á–∏—Ç—ã–≤–∞—é—Ç —Ç—Ä–µ–Ω–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        
        {f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø: {custom_prompt}" if custom_prompt else ""}
        
        –í–µ—Ä–Ω–∏ 5 –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å –Ω–æ–º–µ—Ä–∞ (1., 2., 3., 4., 5.)
        –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∏ –≤–∫–ª—é—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞, —Ü–≤–µ—Ç–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Å—Ç–∏–ª—å.
        """
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        files_to_analyze = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        for i, product_image in enumerate(product_images):
            import io
            buffer = io.BytesIO()
            product_image.save(buffer, format='JPEG', quality=60)
            files_to_analyze.append({
                'data': buffer.getvalue(),
                'mime_type': 'image/jpeg',
                'name': f'product_angle_{i+1}.jpg'
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
        logo_buffer = io.BytesIO()
        logo_image.save(logo_buffer, format='JPEG', quality=60)
        files_to_analyze.append({
            'data': logo_buffer.getvalue(),
            'mime_type': 'image/jpeg',
            'name': 'logo.jpg'
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–µ–Ω–¥–±—É–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        for i, brandbook_file in enumerate(brandbook_files):
            files_to_analyze.append({
                'data': brandbook_file.getvalue(),
                'mime_type': brandbook_file.type,
                'name': f'brandbook_{i}.pdf' if brandbook_file.type == 'application/pdf' else f'brandbook_{i}.jpg'
            })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        from gemini_client import GeminiClient
        gemini_client = GeminiClient()
        
        concepts_response = gemini_client.generate_with_files(unified_prompt, files_to_analyze)
        
        if not concepts_response or not concepts_response.strip():
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        concepts = []
        lines = concepts_response.strip().split('\n')
        for line in lines:
            line = line.strip()
            if line and (line.startswith('1.') or line.startswith('2.') or line.startswith('3.') or 
                        line.startswith('4.') or line.startswith('5.')):
                # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä
                concept = line.split('.', 1)[1].strip()
                concepts.append(concept)
        
        if len(concepts) < 5:
            st.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(concepts)} –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –≤–º–µ—Å—Ç–æ 5")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–∞–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        st.info(f"–°–æ–∑–¥–∞–µ–º {len(concepts)} –∫–æ–Ω—Ü–µ–ø—Ü–∏–π...")
        
        generated_concepts = []
        for i, concept in enumerate(concepts):
            st.write(f"üé® –ö–æ–Ω—Ü–µ–ø—Ü–∏—è {i+1}: {concept}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–∞–ø–∞
            main_product_image = product_images[0]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–∞–ø
            from mockup_generator import get_mockup_generator
            generator = get_mockup_generator()
            
            result = generator.generate_mockups(
                product_image=main_product_image,
                logo_image=logo_image,
                style="modern",
                logo_application="embroidery",
                custom_prompt=concept,
                product_color="–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ",
                product_angle="–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ",
                logo_position="—Ü–µ–Ω—Ç—Ä",
                logo_size="—Å—Ä–µ–¥–Ω–∏–π",
                logo_color="–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ"
            )
            
            if result["status"] == "success" and result["mockups"]["gemini_mockups"]:
                mockup = result["mockups"]["gemini_mockups"][0]
                generated_concepts.append({
                    "index": i + 1,
                    "concept": concept,
                    "mockup": mockup
                })
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ {i+1}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        st.session_state.creative_generated_concepts = generated_concepts
        st.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(generated_concepts)} –∫–æ–Ω—Ü–µ–ø—Ü–∏–π!")
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π: {e}")
        st.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º...")
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
        generate_creative_concepts(brandbook_files)

def generate_creative_concepts(brandbook_files):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 5 –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Ç–æ–≤–∞—Ä–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ session_state
    product_images = st.session_state.creative_product_images
    logo_image = st.session_state.creative_logo_image
    custom_prompt = st.session_state.get('creative_custom_prompt', '')
    
    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ, –µ—Å–ª–∏ –±—Ä–µ–Ω–¥–±—É–∫ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    brand_analysis = None
    if not brandbook_files:
        st.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–µ–Ω–¥–µ...")
        brand_analysis = search_brand_info_online(logo_image)
        if brand_analysis:
            st.success("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–µ–Ω–¥–µ –Ω–∞–π–¥–µ–Ω–∞")
            with st.expander("üé® –ê–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–∞", expanded=False):
                st.write(brand_analysis)
        else:
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if "creative_generated_concepts" in st.session_state and st.session_state.creative_generated_concepts:
        st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
        cols = st.columns(5)  # 5 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è 5 –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
        
        for i, concept_data in enumerate(st.session_state.creative_generated_concepts):
            with cols[i]:
                st.markdown(f"**–ö–æ–Ω—Ü–µ–ø—Ü–∏—è {concept_data['index']}**")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                mockup = concept_data['mockup']
                if "image_data" in mockup:
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 600x600
                    from PIL import Image
                    import io
                    full_image = Image.open(io.BytesIO(mockup["image_data"]))
                    preview_image = full_image.copy()
                    preview_image.thumbnail((600, 600), Image.LANCZOS)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                    st.image(preview_image, use_container_width=True, caption=f"–ö–æ–Ω—Ü–µ–ø—Ü–∏—è {concept_data['index']}")
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                col1, col2 = st.columns(2)
                with col1:
                    if st.button(f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"show_concept_saved_{i}_{concept_data['index']}", use_container_width=True):
                        st.session_state[f"show_concept_{concept_data['index']}"] = True
                        st.rerun()
                with col2:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
                    mockup = concept_data['mockup']
                    if "image_data" in mockup:
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å",
                            data=mockup["image_data"],
                            file_name=f"concept_{concept_data['index']}.jpg",
                            mime="image/jpeg",
                            key=f"download_btn_saved_{i}_{concept_data['index']}",
                            use_container_width=True
                        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
        for concept_data in st.session_state.creative_generated_concepts:
            if st.session_state.get(f"show_concept_{concept_data['index']}", False):
                with st.expander(f"–ö–æ–Ω—Ü–µ–ø—Ü–∏—è {concept_data['index']} - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è", expanded=True):
                    st.write(concept_data['concept'])
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1200x1200
                    mockup = concept_data['mockup']
                    if "image_data" in mockup:
                        full_image = Image.open(io.BytesIO(mockup["image_data"]))
                        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 1200x1200 —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                        full_image.thumbnail((1200, 1200), Image.LANCZOS)
                        st.image(full_image, use_container_width=True)
                    
                    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    col1, col2 = st.columns(2)
                    with col1:
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å",
                            data=mockup["image_data"],
                            file_name=f"concept_{concept_data['index']}.jpg",
                            mime="image/jpeg",
                            key=f"download_concept_{concept_data['index']}_btn"
                        )
                    
                    with col2:
                        if st.button(f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", key=f"regenerate_concept_{concept_data['index']}"):
                            st.session_state.regenerate_creative_concept = concept_data['index']
                            st.rerun()
                    
                    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                    if st.button(f"–ó–∞–∫—Ä—ã—Ç—å", key=f"close_concept_{concept_data['index']}"):
                        st.session_state[f"show_concept_{concept_data['index']}"] = False
                        st.rerun()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        # return
    
    st.info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥–±—É–∫ –∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏
        analysis_prompt = f"""
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–µ—Ä—á–µ–Ω–¥–∞–π–∑–∏–Ω–≥—É –∏ –¥–∏–∑–∞–π–Ω—É —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—Ä–µ–Ω–¥–±—É–∫–∞ –∏ —Å–æ–∑–¥–∞–π 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
        
        {f"–ê–ù–ê–õ–ò–ó –ë–†–ï–ù–î–ê (–Ω–∞–π–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ):\n{brand_analysis}\n" if brand_analysis else ""}
        
        –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú –ö–û–ù–¶–ï–ü–¶–ò–ô:
        1. –ò–∑—É—á–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –º–µ—Ä—á–µ–Ω–¥–∞–π–∑–∏–Ω–≥–µ 2024-2025
        2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–≤–∞—Ä –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        3. –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±—Ä–µ–Ω–¥–±—É–∫ - –∏–∑—É—á–∏ –µ–≥–æ –∏ –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—Ä–µ–Ω–¥–∞
        4. {f"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ –≤—ã—à–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –≤ —Å—Ç–∏–ª–µ –±—Ä–µ–Ω–¥–∞" if brand_analysis else "–°–æ–∑–¥–∞–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏ —Ç—Ä–µ–Ω–¥–æ–≤"}
        5. –ü–æ–¥—É–º–∞–π –æ —Ç–æ–º, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —è—Ä–∫–∏–º–∏ –∏ —Ü–µ–ø–ª—è—é—â–∏–º–∏
        
        –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–û–ù–¶–ï–ü–¶–ò–Ø–ú:
        - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∏ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏, –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–º–∏
        - –î–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –≤ —Ç–æ–≤–∞—Ä –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ
        - –ù–µ –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω—è—Ç—å —Å–∞–º —Ç–æ–≤–∞—Ä, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞
        - –ö–∞–∂–¥–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö
        - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —è—Ä–∫–∏–º–∏, —Ü–µ–ø–ª—è—é—â–∏–º–∏ –∏ –ø—Ä–æ–¥–∞—é—â–∏–º–∏
        - –£—á–∏—Ç—ã–≤–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã: –º–∏–Ω–∏–º–∞–ª–∏–∑–º, —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        
        –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø: {custom_prompt}
        
        –í–µ—Ä–Ω–∏ 5 –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å –Ω–æ–º–µ—Ä–∞ (1., 2., 3., 4., 5.)
        –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∏ –≤–∫–ª—é—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞, —Ü–≤–µ—Ç–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Å—Ç–∏–ª—å.
        """
        
        # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
        st.info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã...")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ç—Ä–µ–Ω–¥—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        product_analysis_prompt = f"""
        üö® –í–ê–ñ–ù–û: –í—Å–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å 1024x1024 –ø–∏–∫—Å–µ–ª–µ–π (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ) üö®
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
        
        –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï:
        1. –¢–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏ –µ–≥–æ –∫–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        2. –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ç–µ–∫—Å—Ç—É—Ä—É
        3. –¶–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É
        4. –†–∞–∑–º–µ—Ä –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        5. –¶–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
        6. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
        
        –¢–†–ï–ù–î–´ –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –¢–ò–ü–ê –¢–û–í–ê–†–ê:
        7. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –¥–∏–∑–∞–π–Ω–µ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ (—Ñ—É—Ç–±–æ–ª–∫–∏, —Ç–æ–ª—Å—Ç–æ–≤–∫–∏, –∫—Ä—É–∂–∫–∏ –∏ —Ç.–¥.)
        8. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        9. –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        10. –ú–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –∏–º–µ–Ω–Ω–æ –∫ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É
        11. –¢—Ä–µ–Ω–¥—ã –≤ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–º —Ç–∏–ø–µ —Ç–æ–≤–∞—Ä–∞
        12. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–µ—á–∞—Ç–∏/–≤—ã—à–∏–≤–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        
        –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –î–õ–Ø –î–ò–ó–ê–ô–ù–ê:
        13. –õ—É—á—à–∏–µ —Ä–∞–∫—É—Ä—Å—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞
        14. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–∏–∑–∞–π–Ω–∞
        15. –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∏–∑–∞–π–Ω–∞
        16. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏
        
        –û—Ç–≤–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ, —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞.
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        from gemini_client import GeminiClient
        gemini_client = GeminiClient()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ bytes –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        import io
        product_files_for_analysis = []
        for i, product_image in enumerate(product_images):
            product_buffer = io.BytesIO()
            product_image.save(product_buffer, format='JPEG', quality=95)
            product_image_bytes = product_buffer.getvalue()
            product_files_for_analysis.append({
                'data': product_image_bytes,
                'mime_type': 'image/jpeg',
                'name': f'product_angle_{i+1}.jpg'
            })
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
        product_analysis = gemini_client.generate_with_files(product_analysis_prompt, product_files_for_analysis)
        
        if product_analysis:
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            with st.expander("üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞", expanded=False):
                st.write(product_analysis)
        
        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –±—Ä–µ–Ω–¥–∞
        st.info("–°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –±—Ä–µ–Ω–¥–∞...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –±—Ä–µ–Ω–¥–∞
        if product_analysis:
            analysis_prompt = f"""
            –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–µ—Ä—á–µ–Ω–¥–∞–π–∑–∏–Ω–≥—É –∏ –¥–∏–∑–∞–π–Ω—É —Ç–æ–≤–∞—Ä–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –±—Ä–µ–Ω–¥–±—É–∫–∞ –∏ —Å–æ–∑–¥–∞–π 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞.
            
            –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–ê (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω):
            {product_analysis}
            
            {f"–ê–ù–ê–õ–ò–ó –ë–†–ï–ù–î–ê (–Ω–∞–π–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ):\n{brand_analysis}\n" if brand_analysis else ""}
            
            –ü–ï–†–ï–î –°–û–ó–î–ê–ù–ò–ï–ú –ö–û–ù–¶–ï–ü–¶–ò–ô:
            1. –ò–∑—É—á–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –º–µ—Ä—á–µ–Ω–¥–∞–π–∑–∏–Ω–≥–µ 2024-2025
            2. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞ –≤—ã—à–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
            3. –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –±—Ä–µ–Ω–¥–±—É–∫ - –∏–∑—É—á–∏ –µ–≥–æ –∏ –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±—Ä–µ–Ω–¥–∞
            4. {f"–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ –≤—ã—à–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –≤ —Å—Ç–∏–ª–µ –±—Ä–µ–Ω–¥–∞" if brand_analysis else "–°–æ–∑–¥–∞–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –∏ —Ç—Ä–µ–Ω–¥–æ–≤"}
            5. –ü–æ–¥—É–º–∞–π –æ —Ç–æ–º, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —è—Ä–∫–∏–º–∏ –∏ —Ü–µ–ø–ª—è—é—â–∏–º–∏, —É—á–∏—Ç—ã–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
            
            –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–û–ù–¶–ï–ü–¶–ò–Ø–ú:
            - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∏ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
            - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏, –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏ –¥–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–º–∏
            - –î–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –≤ —Ç–æ–≤–∞—Ä –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ, —É—á–∏—Ç—ã–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
            - –ù–µ –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω—è—Ç—å —Å–∞–º —Ç–æ–≤–∞—Ä, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞
            - –ö–∞–∂–¥–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö
            - –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —è—Ä–∫–∏–º–∏, —Ü–µ–ø–ª—è—é—â–∏–º–∏ –∏ –ø—Ä–æ–¥–∞—é—â–∏–º–∏
            - –î–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã –∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
            
            {f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø: {custom_prompt}" if custom_prompt else ""}
            
            –í–µ—Ä–Ω–∏ 5 –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π, –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å –Ω–æ–º–µ—Ä–∞ (1., 2., 3., 4., 5.)
            –ö–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∏ –≤–∫–ª—é—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞, —Ü–≤–µ—Ç–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —Å—Ç–∏–ª—å, —É—á–∏—Ç—ã–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞.
            """
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        files_to_analyze = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL Image –≤ bytes –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        import io
        
        # –í—Å–µ —Ä–∞–∫—É—Ä—Å—ã —Ç–æ–≤–∞—Ä–∞
        for i, product_image in enumerate(product_images):
            product_buffer = io.BytesIO()
            product_image.save(product_buffer, format='JPEG', quality=95)
            files_to_analyze.append({
                'data': product_buffer.getvalue(),
                'mime_type': 'image/jpeg',
                'name': f'product_angle_{i+1}.jpg'
            })
        
        # –õ–æ–≥–æ—Ç–∏–ø
        logo_buffer = io.BytesIO()
        logo_image.save(logo_buffer, format='JPEG', quality=95)
        files_to_analyze.append({
            'data': logo_buffer.getvalue(),
            'mime_type': 'image/jpeg', 
            'name': 'logo.jpg'
        })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –±—Ä–µ–Ω–¥–±—É–∫–∞ (–µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
        if brandbook_files:
            for i, file in enumerate(brandbook_files):
                if file.type == 'application/pdf':
                    files_to_analyze.append({
                        'data': file,
                        'mime_type': 'application/pdf',
                        'name': f'brandbook_{i}.pdf'
                    })
                else:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    from PIL import Image
                    import io
                    image = Image.open(file)
                    if image.mode in ['RGBA', 'LA', 'P']:
                        from image_processor import ImageProcessor
                        processor = ImageProcessor()
                        image = processor.convert_to_rgb(image)
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes
                    buffer = io.BytesIO()
                    image.save(buffer, format='JPEG', quality=95)
                    files_to_analyze.append({
                        'data': buffer.getvalue(),
                        'mime_type': 'image/jpeg',
                        'name': f'brandbook_{i}.jpg'
                    })
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        concepts_response = gemini_client.generate_with_files(analysis_prompt, files_to_analyze)
        
        if not concepts_response or not concepts_response.strip():
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        concepts = []
        lines = concepts_response.strip().split('\n')
        for line in lines:
            line = line.strip()
            if line and (line.startswith('1.') or line.startswith('2.') or line.startswith('3.') or 
                        line.startswith('4.') or line.startswith('5.')):
                # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä
                concept = line.split('.', 1)[1].strip()
                concepts.append(concept)
        
        if len(concepts) < 5:
            st.warning(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–ª—å–∫–æ {len(concepts)} –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –≤–º–µ—Å—Ç–æ 5")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        st.markdown("### –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏")
        for i, concept in enumerate(concepts[:5], 1):
            with st.expander(f"–ö–æ–Ω—Ü–µ–ø—Ü–∏—è {i}", expanded=True):
                st.write(concept)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        st.markdown("### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–æ–∫–∞–ø–æ–≤
        from mockup_generator import MockupGenerator
        generator = MockupGenerator()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        generated_concepts = []
        for i, concept in enumerate(concepts[:5], 1):
            st.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—é {i}...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            generation_prompt = f"""
            {concept}
            
            –°–æ–∑–¥–∞–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –º–æ–∫–∞–ø —Ç–æ–≤–∞—Ä–∞ —Å —ç—Ç–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–µ–π.
            –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π –ª–æ–≥–æ—Ç–∏–ø –≤ –¥–∏–∑–∞–π–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.
            
            üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –†–ê–ó–ú–ï–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø üö®
            - –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ 1024x1024 –ø–∏–∫—Å–µ–ª–µ–π
            - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ö–í–ê–î–†–ê–¢–ù–´–ú (1:1)
            - –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            - –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º
            
            {custom_prompt}
            """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–∞–ø–∞
            main_product_image = product_images[0]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–∞–ø
            result = generator.generate_mockups(
                product_image=main_product_image,
                logo_image=logo_image,
                style="modern",
                logo_application="embroidery",
                custom_prompt=generation_prompt,
                product_color="–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ",
                product_angle="—Å–ø–µ—Ä–µ–¥–∏",
                logo_position="—Ü–µ–Ω—Ç—Ä",
                logo_size="—Å—Ä–µ–¥–Ω–∏–π",
                logo_color="–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ"
            )
            
            if result and "mockups" in result and "gemini_mockups" in result["mockups"]:
                mockups = result["mockups"]["gemini_mockups"]
                if mockups:
                    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ 1200x1200
                    mockup = mockups[0].copy()
                    if "image_data" in mockup:
                        from PIL import Image
                        import io
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        image = Image.open(io.BytesIO(mockup["image_data"]))
                        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 1200x1200 —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                        image.thumbnail((1200, 1200), Image.LANCZOS)
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ bytes
                        buffer = io.BytesIO()
                        image.save(buffer, format='JPEG', quality=95)
                        mockup["image_data"] = buffer.getvalue()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ FTP
                    try:
                        from services.upload_services import upload_to_ftp
                        upload_to_ftp(
                            image_data=mockup["image_data"],
                            metadata={
                                'concept': concept,
                                'generation_type': 'creative',
                                'concept_index': i,
                                'custom_prompt': custom_prompt
                            },
                            description=f"–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è {i+1}: {concept[:50]}..."
                        )
                        # –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ FTP (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏—é {i+1} –Ω–∞ FTP: {str(e)}")
                    
                    generated_concepts.append({
                        'concept': concept,
                        'mockup': mockup,
                        'index': i
                    })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
        st.session_state.creative_generated_concepts = generated_concepts
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–æ–≤—ã–µ)
        display_concepts = st.session_state.get('creative_generated_concepts', generated_concepts)
        if display_concepts:
            st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
            cols = st.columns(5)  # 5 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è 5 –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
            
            for i, concept_data in enumerate(display_concepts):
                with cols[i]:
                    st.markdown(f"**–ö–æ–Ω—Ü–µ–ø—Ü–∏—è {concept_data['index']}**")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    mockup = concept_data['mockup']
                    if "image_data" in mockup:
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 600x600
                        from PIL import Image
                        import io
                        full_image = Image.open(io.BytesIO(mockup["image_data"]))
                        preview_image = full_image.copy()
                        preview_image.thumbnail((600, 600), Image.LANCZOS)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                        st.image(preview_image, use_container_width=True, caption=f"–ö–æ–Ω—Ü–µ–ø—Ü–∏—è {concept_data['index']}")
                    
                    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button(f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ", key=f"show_concept_new_{i}_{concept_data['index']}", use_container_width=True):
                            st.session_state[f"show_concept_{concept_data['index']}"] = True
                            st.rerun()
                    with col2:
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
                        mockup = concept_data['mockup']
                        if "image_data" in mockup:
                            st.download_button(
                                label="–°–∫–∞—á–∞—Ç—å",
                                data=mockup["image_data"],
                                file_name=f"concept_{concept_data['index']}.jpg",
                                mime="image/jpeg",
                                key=f"download_btn_new_{i}_{concept_data['index']}",
                                use_container_width=True
                            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
            for concept_data in display_concepts:
                if st.session_state.get(f"show_concept_{concept_data['index']}", False):
                    with st.expander(f"–ö–æ–Ω—Ü–µ–ø—Ü–∏—è {concept_data['index']} - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è", expanded=True):
                        st.write(concept_data['concept'])
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1200x1200
                        mockup = concept_data['mockup']
                        if "image_data" in mockup:
                            full_image = Image.open(io.BytesIO(mockup["image_data"]))
                            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 1200x1200 —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                            full_image.thumbnail((1200, 1200), Image.LANCZOS)
                            st.image(full_image, use_container_width=True)
                        
                        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                        col1, col2 = st.columns(2)
                        with col1:
                            st.download_button(
                                label="–°–∫–∞—á–∞—Ç—å",
                                data=mockup["image_data"],
                                file_name=f"concept_{concept_data['index']}.jpg",
                                mime="image/jpeg",
                                key=f"download_concept_{concept_data['index']}_btn"
                            )
                        
                        with col2:
                            if st.button(f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", key=f"regenerate_concept_{concept_data['index']}"):
                                st.session_state.regenerate_creative_concept = concept_data['index']
                                st.rerun()
                        
                        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
                        if st.button(f"–ó–∞–∫—Ä—ã—Ç—å", key=f"close_concept_{concept_data['index']}"):
                            st.session_state[f"show_concept_{concept_data['index']}"] = False
                            st.rerun()
        else:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–π")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π: {str(e)}")
        import traceback
        st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

def batch_processing_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    from PIL import Image
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å (–Ω–æ –Ω–µ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏)
    if "batch_results" in st.session_state and "batch_regenerate_params" not in st.session_state:
        st.markdown("---")
        st.subheader("üé® –¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", type="secondary", use_container_width=True, help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
                # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ session_state
                if "batch_results" in st.session_state:
                    del st.session_state.batch_results
                if "batch_product_images" in st.session_state:
                    del st.session_state.batch_product_images
                if "batch_logo_image" in st.session_state:
                    del st.session_state.batch_logo_image
                st.rerun()
        
        batch_result = {
            "results": st.session_state.batch_results,
            "saved_paths": []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        }
        display_batch_results(batch_result)
        st.markdown("---")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if "batch_regenerate_params" in st.session_state:
        regenerate_params = st.session_state.batch_regenerate_params
        item_index = regenerate_params["item_index"]
        
        st.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: –¢–æ–≤–∞—Ä {item_index + 1}")
        
        with st.spinner("–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏..."):
            try:
                generator = get_mockup_generator()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
                prompt_data = regenerate_params["prompt_data"]
                original_image = regenerate_params["original_image"]
                
                # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                st.write(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ '–¢–æ–≤–∞—Ä {item_index + 1}' (–∏–Ω–¥–µ–∫—Å: {item_index})")
                st.write(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt_data.get('style', 'N/A')} —Å—Ç–∏–ª—å, {prompt_data.get('logo_application', 'N/A')} –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–æ–∫–∞–ø —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                pattern_image = st.session_state.get("batch_pattern_image", None)
                new_result = generator.gemini_client.generate_mockup_with_analysis(
                    original_image, st.session_state.batch_logo_image, prompt_data, "", pattern_image
                )
                
                if new_result and len(new_result) > 0:
                    mockup = new_result[0]
                    st.write(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –º–æ–∫–∞–ø —Ä–∞–∑–º–µ—Ä–æ–º {len(mockup.get('image_data', b''))} –±–∞–π—Ç")
                    
                    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if "batch_results" in st.session_state:
                        batch_results = st.session_state.batch_results
                        st.write(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(batch_results)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
                        if item_index < len(batch_results):
                            # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–∫–∞–ø –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                            batch_results[item_index]["mockup"] = mockup
                            batch_results[item_index]["status"] = "success"
                            # –û–±–Ω–æ–≤–ª—è–µ–º session_state
                            st.session_state.batch_results = batch_results
                            st.success(f"‚úÖ –¢–æ–≤–∞—Ä {item_index + 1} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω!")
                        else:
                            st.error(f"‚ùå –ò–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ {item_index} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (–≤—Å–µ–≥–æ: {len(batch_results)})")
                    else:
                        st.error("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ session_state")
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä - –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Gemini")
                    st.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {new_result}")
                
                # –û—á–∏—â–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                del st.session_state.batch_regenerate_params
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è: {e}")
                del st.session_state.batch_regenerate_params
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if "batch_results" in st.session_state:
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç batch_result –¥–ª—è display_batch_results
            batch_result = {
                "results": st.session_state.batch_results,
                "saved_paths": []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏
            }
            display_batch_results(batch_result)
        return
    
    st.subheader("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    
    # –í–µ—Ä—Å—Ç–∫–∞ –≤ 3 —Å—Ç–æ–ª–±–∏–∫–∞ –∫–∞–∫ –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        st.markdown('<div class="settings-block batch-products-block" style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;">', unsafe_allow_html=True)
        st.markdown("### –¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–æ–≤")
        
        product_files = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤",
            type=['jpg', 'jpeg', 'png', 'webp'],
            accept_multiple_files=True,
            key="batch_products"
        )
        
        if product_files and len(product_files) > 10:
            st.error("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 10 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ —Ä–∞–∑")
            product_files = product_files[:10]
        
        if product_files:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
            from image_processor import ImageProcessor
            processor = ImageProcessor()
            converted_images = []
            for f in product_files:
                img = Image.open(f)
                if img.mode in ('RGBA', 'LA', 'P'):
                    img = processor.convert_to_rgb(img)
                converted_images.append(img)
            st.session_state.batch_product_images = converted_images
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–æ–≤
            st.markdown(f"**–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_files)}**")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Å–µ—Ç–∫–µ
            cols = st.columns(2)  # 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
            for i, img in enumerate(st.session_state.batch_product_images):
                with cols[i % 2]:
                    preview_size = (60, 60)
                    preview_img = img.copy()
                    preview_img.thumbnail(preview_size, Image.LANCZOS)
                    st.image(preview_img, caption=f"–¢–æ–≤–∞—Ä {i+1}", width=60)
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        # –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
        st.markdown('<div class="settings-block batch-logo-block" style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;">', unsafe_allow_html=True)
        st.markdown("### –õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        
        logo_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞",
            type=['jpg', 'jpeg', 'png', 'webp'],
            key="batch_logo"
        )
        
        if logo_file:
            logo_image = Image.open(logo_file)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
            if logo_image.mode in ('RGBA', 'LA', 'P'):
                from image_processor import ImageProcessor
                processor = ImageProcessor()
                logo_image = processor.convert_to_rgb(logo_image)
            st.session_state.batch_logo_image = logo_image
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–≤—å—é –ª–æ–≥–æ—Ç–∏–ø–∞
            preview_size = (80, 80)
            preview_logo = logo_image.copy()
            preview_logo.thumbnail(preview_size, Image.LANCZOS)
            st.image(preview_logo, caption="–õ–æ–≥–æ—Ç–∏–ø", width=80)
            st.caption(f"{logo_image.size[0]}x{logo_image.size[1]}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        # –ë–ª–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        st.markdown('<div class="settings-block batch-additional-block" style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;">', unsafe_allow_html=True)
        st.markdown("### –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        pattern_file = st.file_uploader(
            "–ü–∞—Ç—Ç–µ—Ä–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
            type=['jpg', 'jpeg', 'png', 'webp'],
            key="batch_pattern",
            help="–ü–∞—Ç—Ç–µ—Ä–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
        )
        
        if pattern_file:
            pattern_image = Image.open(pattern_file)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
            if pattern_image.mode in ('RGBA', 'LA', 'P'):
                from image_processor import ImageProcessor
                processor = ImageProcessor()
                pattern_image = processor.convert_to_rgb(pattern_image)
            st.session_state.batch_pattern_image = pattern_image
            
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–≤—å—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            preview_size = (60, 60)
            preview_pattern = pattern_image.copy()
            preview_pattern.thumbnail(preview_size, Image.LANCZOS)
            st.image(preview_pattern, caption="–ü–∞—Ç—Ç–µ—Ä–Ω", width=60)
            st.caption(f"{pattern_image.size[0]}x{pattern_image.size[1]}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if product_files and logo_file:
        st.markdown("---")
        st.markdown("**‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            st.markdown('<div class="settings-block batch-settings-block" style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;">', unsafe_allow_html=True)
            st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            
            product_color = st.selectbox(
                "–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                ["–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ", "–±–µ–ª—ã–π", "—á–µ—Ä–Ω—ã–π", "—Å–µ—Ä—ã–π", "–∫—Ä–∞—Å–Ω—ã–π", "—Å–∏–Ω–∏–π", "–∑–µ–ª–µ–Ω—ã–π", "–∂–µ–ª—Ç—ã–π", "—Ä–æ–∑–æ–≤—ã–π", "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", "–±–µ–∂–µ–≤—ã–π", "–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π"],
                help="–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
            )
            
            collection_style = st.selectbox(
                "–°—Ç–∏–ª—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
                ["–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π", "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π", "–í –¥–∏–Ω–∞–º–∏–∫–µ"],
                help="–ï–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
            )
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        with col2:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
            st.markdown('<div class="settings-block batch-additional-block" style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 0.5rem 0;">', unsafe_allow_html=True)
            st.markdown("### 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
            custom_description = st.text_area(
                "–î–æ–ø –æ–ø–∏—Å–∞–Ω–∏–µ",
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: '–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–Ω–∏', '—è—Ä–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ', '–ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ'",
                height=80,
                help="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –ø—Ä–æ–º–ø—Ç–∞–º –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            add_tag = st.checkbox("–î–æ–±–∞–≤–∏—Ç—å –±–∏—Ä–∫–∏", value=False, help="–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –∏–ª–∏ –±–∏—Ä–∫–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∫ —Ç–æ–≤–∞—Ä–∞–º")
            add_person = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏", value=False, help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", type="primary", use_container_width=True):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤..."):
                    try:
                        batch_processor = get_batch_processor()
                        
                        # –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (AI –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ, —Å—Ç–∏–ª—å –∑–∞–¥–∞–Ω)
                        analysis_result = batch_processor.analyze_collection(
                            product_images=st.session_state.batch_product_images,
                            logo_image=st.session_state.batch_logo_image,
                            product_color=product_color,
                            collection_style=collection_style
                        )
                        
                        if analysis_result["status"] == "success":
                            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω - AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞")
                            st.info("üîç AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ç–∏–ø –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –≤—ã–±—Ä–∞–ª —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                            if custom_description.strip() or add_tag or add_person:
                                with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"):
                                    st.write(f"**–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤:** {product_color}")
                                    st.write(f"**–°—Ç–∏–ª—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏:** {collection_style}")
                                    if custom_description.strip():
                                        st.write(f"**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {custom_description}")
                                    if add_tag:
                                        st.write("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:** –î–æ–±–∞–≤–ª–µ–Ω—ã –±–∏—Ä–∫–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º")
                                    if add_person:
                                        st.write("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:** –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
                            with st.expander("üìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤"):
                                for i, prompt_data in enumerate(analysis_result["individual_prompts"]):
                                    st.write(f"**–¢–æ–≤–∞—Ä {i+1}:**")
                                    st.write(f"- –°—Ç–∏–ª—å: {prompt_data.get('style', collection_style)}")
                                    st.write(f"- –ù–∞–Ω–µ—Å–µ–Ω–∏–µ: {prompt_data.get('logo_application', 'embroidery')}")
                                    st.write(f"- –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {prompt_data.get('logo_position', '—Ü–µ–Ω—Ç—Ä')}")
                                    st.write(f"- –†–∞–∑–º–µ—Ä: {prompt_data.get('logo_size', '—Å—Ä–µ–¥–Ω–∏–π')}")
                                    if prompt_data.get('reasoning'):
                                        st.write(f"- –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {prompt_data['reasoning']}")
                                    if prompt_data.get('custom_prompt'):
                                        st.write(f"- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {prompt_data['custom_prompt']}")
                                    st.markdown("---")
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                            st.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–∞–ø–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
                            
                            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            collection_settings = {
                                "product_color": product_color,
                                "collection_style": collection_style
                            }
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∫ –ø—Ä–æ–º–ø—Ç–∞–º
                            for prompt_data in analysis_result["individual_prompts"]:
                                extended_prompt = prompt_data.get("custom_prompt", "")
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∫—É—Ä—Å–∞
                                product_angle = prompt_data.get("product_angle", "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ")
                                if product_angle != "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ":
                                    extended_prompt += " –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã, –ª—é–¥–µ–π, –º–µ–±–µ–ª—å –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä/—Ç–æ–≤–∞—Ä—ã –Ω–∞ —á–∏—Å—Ç–æ–º —Ñ–æ–Ω–µ."
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ
                                if custom_description.strip():
                                    extended_prompt += f" {custom_description.strip()}"
                                
                                if add_tag:
                                    extended_prompt += " –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏–∫–µ—Ç–∫—É –∏–ª–∏ –±–∏—Ä–∫—É —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∫ —Ç–æ–≤–∞—Ä—É. –≠—Ç–∏–∫–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
                                if add_person:
                                    extended_prompt += " –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–æ–º."
                                
                                prompt_data["custom_prompt"] = extended_prompt
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                            total_items = len(st.session_state.batch_product_images)
                            results = []
                            
                            for i, (product_img, prompt_data) in enumerate(zip(
                                st.session_state.batch_product_images,
                                analysis_result["individual_prompts"]
                            )):
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                                progress = (i + 1) / total_items
                                progress_bar.progress(progress)
                                status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{total_items}: –¢–æ–≤–∞—Ä {i+1}")
                                
                                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–∞–ø –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
                                try:
                                    generator = get_mockup_generator()
                                    pattern_image = st.session_state.get("batch_pattern_image", None)
                                    mockup_result = generator.gemini_client.generate_mockup_with_analysis(
                                        product_img, st.session_state.batch_logo_image, prompt_data, "", pattern_image
                                    )
                                    
                                    if mockup_result and len(mockup_result) > 0:
                                        results.append({
                                            "index": i,
                                            "product_name": f"–¢–æ–≤–∞—Ä {i+1}",
                                            "original_image": product_img,
                                            "mockup": mockup_result[0],
                                            "prompt_data": prompt_data,
                                            "status": "success"
                                        })
                                    else:
                                        results.append({
                                            "index": i,
                                            "product_name": f"–¢–æ–≤–∞—Ä {i+1}",
                                            "original_image": product_img,
                                            "mockup": None,
                                            "prompt_data": prompt_data,
                                            "status": "error",
                                            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–∫–∞–ø"
                                        })
                                except Exception as e:
                                    results.append({
                                        "index": i,
                                        "product_name": f"–¢–æ–≤–∞—Ä {i+1}",
                                        "original_image": product_img,
                                        "mockup": None,
                                        "prompt_data": prompt_data,
                                        "status": "error",
                                        "error": str(e)
                                    })
                            
                            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ batch_processor
                            successful = sum(1 for r in results if r["status"] == "success")
                            batch_result = {
                                "status": "success" if successful > 0 else "error",
                                "results": results,
                                "successful": successful,
                                "total_processed": total_items,
                                "processing_time": 0  # –í—Ä–µ–º—è –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –ø–æ–¥—Ö–æ–¥–µ
                            }
                            
                            if batch_result["status"] == "success":
                                st.success(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {batch_result['successful']}/{batch_result['total_processed']} —Ç–æ–≤–∞—Ä–æ–≤")
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                                st.session_state.batch_results = batch_result["results"]
                                display_batch_results(batch_result)
                            else:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {batch_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        
                        elif analysis_result["status"] == "fallback":
                            st.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã (AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
                            st.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–∞–ø–æ–≤ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏...")
                            
                            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            collection_settings = {
                                "product_color": product_color,
                                "collection_style": collection_style
                            }
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∫ –ø—Ä–æ–º–ø—Ç–∞–º (fallback —Å–ª—É—á–∞–π)
                            for prompt_data in analysis_result["individual_prompts"]:
                                extended_prompt = prompt_data.get("custom_prompt", "")
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–∫—É—Ä—Å–∞
                                product_angle = prompt_data.get("product_angle", "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ")
                                if product_angle != "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ":
                                    extended_prompt += " –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã, –ª—é–¥–µ–π, –º–µ–±–µ–ª—å –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. –û—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä/—Ç–æ–≤–∞—Ä—ã –Ω–∞ —á–∏—Å—Ç–æ–º —Ñ–æ–Ω–µ."
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ
                                if custom_description.strip():
                                    extended_prompt += f" {custom_description.strip()}"
                                
                                if add_tag:
                                    extended_prompt += " –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∏–∫–µ—Ç–∫—É –∏–ª–∏ –±–∏—Ä–∫—É —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∫ —Ç–æ–≤–∞—Ä—É. –≠—Ç–∏–∫–µ—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
                                if add_person:
                                    extended_prompt += " –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫–æ–º."
                                
                                prompt_data["custom_prompt"] = extended_prompt
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                            total_items = len(st.session_state.batch_product_images)
                            results = []
                            
                            for i, (product_img, prompt_data) in enumerate(zip(
                                st.session_state.batch_product_images,
                                analysis_result["individual_prompts"]
                            )):
                                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                                progress = (i + 1) / total_items
                                progress_bar.progress(progress)
                                status_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{total_items}: –¢–æ–≤–∞—Ä {i+1}")
                                
                                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–∞–ø –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
                                try:
                                    generator = get_mockup_generator()
                                    pattern_image = st.session_state.get("batch_pattern_image", None)
                                    mockup_result = generator.gemini_client.generate_mockup_with_analysis(
                                        product_img, st.session_state.batch_logo_image, prompt_data, "", pattern_image
                                    )
                                    
                                    if mockup_result and len(mockup_result) > 0:
                                        results.append({
                                            "index": i,
                                            "product_name": f"–¢–æ–≤–∞—Ä {i+1}",
                                            "original_image": product_img,
                                            "mockup": mockup_result[0],
                                            "prompt_data": prompt_data,
                                            "status": "success"
                                        })
                                    else:
                                        results.append({
                                            "index": i,
                                            "product_name": f"–¢–æ–≤–∞—Ä {i+1}",
                                            "original_image": product_img,
                                            "mockup": None,
                                            "prompt_data": prompt_data,
                                            "status": "error",
                                            "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–∫–∞–ø"
                                        })
                                except Exception as e:
                                    results.append({
                                        "index": i,
                                        "product_name": f"–¢–æ–≤–∞—Ä {i+1}",
                                        "original_image": product_img,
                                        "mockup": None,
                                        "prompt_data": prompt_data,
                                        "status": "error",
                                        "error": str(e)
                                    })
                            
                            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ batch_processor
                            successful = sum(1 for r in results if r["status"] == "success")
                            batch_result = {
                                "status": "success" if successful > 0 else "error",
                                "results": results,
                                "successful": successful,
                                "total_processed": total_items,
                                "processing_time": 0  # –í—Ä–µ–º—è –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –ø–æ–¥—Ö–æ–¥–µ
                            }
                            
                            if batch_result["status"] == "success":
                                st.success(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {batch_result['successful']}/{batch_result['total_processed']} —Ç–æ–≤–∞—Ä–æ–≤")
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                                st.session_state.batch_results = batch_result["results"]
                                display_batch_results(batch_result)
                            else:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {batch_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        
                        else:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    
                    except Exception as e:
                        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                        st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    else:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

def display_batch_results(batch_result: dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    results = batch_result.get("results", [])
    
    if not results:
        st.error("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    st.markdown("---")
    st.subheader("üé® –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    for i in range(0, len(results), 2):
        cols = st.columns(2)
        
        for j, col in enumerate(cols):
            if i + j < len(results):
                result = results[i + j]
                
                with col:
                    if result["status"] == "success" and result["mockup"]:
                        product_name = result.get("product_name", f"–¢–æ–≤–∞—Ä {result['index'] + 1}")
                        st.markdown(f"**{product_name}**")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∫–∞–ø–∞
                        if "image_data" in result["mockup"]:
                            try:
                                from PIL import Image
                                import io
                                from image_processor import ImageProcessor
                                
                                image_data = result["mockup"]["image_data"]
                                image = Image.open(io.BytesIO(image_data))
                                
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
                                if image.mode in ('RGBA', 'LA', 'P'):
                                    processor = ImageProcessor()
                                    image = processor.convert_to_rgb(image)
                                    # –û–±–Ω–æ–≤–ª—è–µ–º image_data
                                    img_byte_arr = io.BytesIO()
                                    image.save(img_byte_arr, format='JPEG', quality=95)
                                    image_data = img_byte_arr.getvalue()
                                
                                st.image(image, use_container_width=True)
                                
                                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                                col_download, col_regenerate = st.columns(2)
                                
                                with col_download:
                                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                                    st.download_button(
                                        label=f"üì• –°–∫–∞—á–∞—Ç—å",
                                        data=image_data,
                                        file_name=f"collection_item_{result['index'] + 1}.jpg",
                                        mime="image/jpeg",
                                        key=f"download_batch_{result['index']}",
                                        use_container_width=True
                                    )
                                    
                                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ FTP
                                    try:
                                        from services.upload_services import upload_to_ftp
                                        upload_to_ftp(
                                            image_data=image_data,
                                            metadata={
                                                'product_name': product_name,
                                                'generation_type': 'batch',
                                                'item_index': result['index'],
                                                'prompt_data': result.get("prompt_data", {})
                                            },
                                            description=f"–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {product_name}"
                                        )
                                        # {product_name} –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ FTP (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
                                    except Exception as e:
                                        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {product_name} –Ω–∞ FTP: {str(e)}")
                                
                                with col_regenerate:
                                    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                                    if st.button(f"üé® –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", key=f"regenerate_batch_{result['index']}", use_container_width=True, help="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–∫–∞–ø —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"):
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
                                        st.session_state.batch_regenerate_params = {
                                            "item_index": result['index'],
                                            "product_name": f"–¢–æ–≤–∞—Ä {i+1}",
                                            "prompt_data": result["prompt_data"],
                                            "original_image": result["original_image"]
                                        }
                                        st.rerun()
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                        
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–º–ø—Ç–µ
                        with st.expander(f"üìù –ü—Ä–æ–º–ø—Ç {product_name}"):
                            prompt_data = result["prompt_data"]
                            st.write(f"**–°—Ç–∏–ª—å:** {prompt_data.get('style', 'N/A')}")
                            st.write(f"**–ù–∞–Ω–µ—Å–µ–Ω–∏–µ:** {prompt_data.get('logo_application', 'N/A')}")
                            st.write(f"**–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {prompt_data.get('logo_position', 'N/A')}")
                            st.write(f"**–†–∞–∑–º–µ—Ä:** {prompt_data.get('logo_size', 'N/A')}")
                            st.write(f"**–¶–≤–µ—Ç:** {prompt_data.get('logo_color', 'N/A')}")
                            if prompt_data.get('custom_prompt'):
                                st.write(f"**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:** {prompt_data['custom_prompt']}")
                    
                    else:
                        product_name = result.get("product_name", f"–¢–æ–≤–∞—Ä {result['index'] + 1}")
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {product_name}")
                        if result.get("error"):
                            st.write(f"–û—à–∏–±–∫–∞: {result['error']}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    if "saved_paths" in batch_result and batch_result["saved_paths"]:
        st.info(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(batch_result['saved_paths'])} —Ñ–∞–π–ª–æ–≤")
        with st.expander("üìÅ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º"):
            for i, path in enumerate(batch_result["saved_paths"]):
                st.write(f"{i+1}. {path}")


def upload_to_google_drive(image_data: bytes, metadata: dict, description: str = ""):
    """Google Drive –æ—Ç–∫–ª—é—á–µ–Ω"""
    pass

def get_google_drive_mockups(limit: int = 50) -> list:
    """Google Drive –æ—Ç–∫–ª—é—á–µ–Ω"""
    return []

def get_all_mockups_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–æ–∫–∞–ø—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    all_mockups_data = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º session_state –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    session_mockups = []
    # if "generated_mockups" in st.session_state:
    #     for i, mockup_data in enumerate(st.session_state.generated_mockups):
    #         if "image_data" in mockup_data:
    #             session_mockups.append({
    #                 'image_file': f"session_mockup_{i+1}.jpg",
    #                 'image_path': f"session_state_{i}",
    #                 'cache_key': f"session_{i}",
    #                 'metadata': mockup_data.get('metadata', {}),
    #                 'created_time': mockup_data.get('timestamp', time.time()),
    #                 'source': 'session_state',
    #                 'image_data': mockup_data['image_data']
    #             })
    
    # Google Drive –æ—Ç–∫–ª—é—á–µ–Ω
    drive_mockups = []
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–∫–∞–ø—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
    server_mockups = get_server_mockups(50)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–∫–∞–ø—ã —Å FTP
    ftp_mockups = get_ftp_mockups(50)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–æ–ª—å–∫–æ FTP –º–æ–∫–∞–ø—ã (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã)
    all_mockups_data.extend(ftp_mockups)
    
    if not all_mockups_data:
        st.info("üìÅ –ì–∞–ª–µ—Ä–µ—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–∫–∞–ø–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö –∑–¥–µ—Å—å!")
        
        storage_info = []
        if SERVER_STORAGE_ENABLED:
            storage_info.append("—Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        if FTP_ENABLED:
            storage_info.append("FTP —Å–µ—Ä–≤–µ—Ä")
        storage_info.append("–ø–∞–º—è—Ç—å —Å–µ—Å—Å–∏–∏")
        
        if storage_info:
            st.info(f"üí° –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {', '.join(storage_info)}")
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        with st.expander("üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
            st.write(f"**–¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:** {os.getcwd()}")
            st.write(f"**–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –ø–∞–ø–∫–∏:**")
            st.write(f"- `{outputs_dir}`: {'‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if os.path.exists(outputs_dir) else '‚ùå –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º cache_images_dir –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            cache_images_dir = os.path.join(cache_dir, "images")
            st.write(f"- `{cache_images_dir}`: {'‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if os.path.exists(cache_images_dir) else '‚ùå –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}")
            
            if os.path.exists(outputs_dir):
                files = os.listdir(outputs_dir)
                st.write(f"**–§–∞–π–ª—ã –≤ {outputs_dir}:** {files}")
            
            if os.path.exists(cache_images_dir):
                files = os.listdir(cache_images_dir)
                st.write(f"**–§–∞–π–ª—ã –≤ {cache_images_dir}:** {files}")
            
            st.write(f"**–ú–æ–∫–∞–ø—ã –≤ session_state:** {len(session_mockups)}")
            st.write(f"**Google Drive –æ—Ç–∫–ª—é—á–µ–Ω**")
        
        return
    
    mockups_data = all_mockups_data
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    mockups_data.sort(key=lambda x: x['created_time'], reverse=True)
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.markdown("### üîç –§–∏–ª—å—Ç—Ä—ã")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∏–ª—é
        all_styles = set()
        for mockup in mockups_data:
            style = mockup['metadata'].get('mockup_style', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            all_styles.add(style)
        
        selected_style = st.selectbox(
            "–°—Ç–∏–ª—å –º–æ–∫–∞–ø–∞:",
            ["–í—Å–µ"] + sorted(list(all_styles)),
            index=0
        )
    
    with col2:
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –Ω–∞–Ω–µ—Å–µ–Ω–∏—è
        all_applications = set()
        for mockup in mockups_data:
            application = mockup['metadata'].get('logo_application', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            all_applications.add(application)
        
        selected_application = st.selectbox(
            "–¢–∏–ø –Ω–∞–Ω–µ—Å–µ–Ω–∏—è:",
            ["–í—Å–µ"] + sorted(list(all_applications)),
            index=0
        )
    
    with col3:
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        date_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥:",
            ["–í—Å–µ", "–°–µ–≥–æ–¥–Ω—è", "–ó–∞ –Ω–µ–¥–µ–ª—é", "–ó–∞ –º–µ—Å—è—Ü"],
            index=0
        )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_mockups = mockups_data
    
    if selected_style != "–í—Å–µ":
        filtered_mockups = [m for m in filtered_mockups if m['metadata'].get('mockup_style') == selected_style]
    
    if selected_application != "–í—Å–µ":
        filtered_mockups = [m for m in filtered_mockups if m['metadata'].get('logo_application') == selected_application]
    
    if date_filter != "–í—Å–µ":
        from datetime import datetime, timedelta
        now = datetime.now()
        
        if date_filter == "–°–µ–≥–æ–¥–Ω—è":
            cutoff = now.replace(hour=0, minute=0, second=0, microsecond=0)
        elif date_filter == "–ó–∞ –Ω–µ–¥–µ–ª—é":
            cutoff = now - timedelta(days=7)
        elif date_filter == "–ó–∞ –º–µ—Å—è—Ü":
            cutoff = now - timedelta(days=30)
        
        filtered_mockups = [m for m in filtered_mockups if datetime.fromtimestamp(m['created_time']) >= cutoff]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.markdown(f"### üìä –ù–∞–π–¥–µ–Ω–æ –º–æ–∫–∞–ø–æ–≤: {len(filtered_mockups)}")
    
    if not filtered_mockups:
        st.info("üîç –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –º–æ–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–∫–∞–ø—ã –≤ –≤–∏–¥–µ –ø–ª–∏—Ç–æ–∫
    st.markdown("### üñºÔ∏è –ú–æ–∫–∞–ø—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    col1, col2 = st.columns([3, 1])
    with col2:
        images_per_row = st.selectbox("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä—è–¥—É:", [2, 3, 4], index=1)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for i in range(0, len(filtered_mockups), images_per_row):
        cols = st.columns(images_per_row)
        
        for j, col in enumerate(cols):
            if i + j < len(filtered_mockups):
                mockup = filtered_mockups[i + j]
                
                with col:
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                    try:
                        image = None
                        file_size = 0
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ session_state
                        if mockup.get('source') == 'session_state' and 'image_data' in mockup:
                            try:
                                import base64
                                import io
                                image_data = base64.b64decode(mockup['image_data'])
                                image = Image.open(io.BytesIO(image_data))
                                file_size = len(image_data)
                                st.image(image, use_container_width=True, caption=f"–ú–æ–∫–∞–ø {i + j + 1} (–∏–∑ —Å–µ—Å—Å–∏–∏)")
                            except Exception as session_error:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏: {str(session_error)}")
                                continue
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        else:
                            # –î–ª—è FTP –º–æ–∫–∞–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º web_url
                            if mockup.get('source') == 'ftp_upload' and 'web_url' in mockup:
                                try:
                                    import requests
                                    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
                                    response = requests.get(mockup['web_url'], timeout=10, headers=headers)
                                    if response.status_code == 200:
                                        image = Image.open(io.BytesIO(response.content))
                                        st.image(image, use_container_width=True, caption=f"–ú–æ–∫–∞–ø {i + j + 1} (—Å —Å–µ—Ä–≤–µ—Ä–∞)")
                                        file_size = len(response.content)
                                    else:
                                        # –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
                                        print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {mockup['web_url']} (HTTP {response.status_code})")
                                        continue
                                except Exception as web_error:
                                    # –°–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
                                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {mockup['web_url']} - {str(web_error)}")
                                    continue
                            
                            # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            else:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                                if not os.path.exists(mockup['image_path']):
                                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {mockup['image_file']}")
                                    st.write(f"**–ü—É—Ç—å:** {mockup['image_path']}")
                                    st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {mockup.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                    continue
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                                file_size = os.path.getsize(mockup['image_path'])
                                if file_size == 0:
                                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π: {mockup['image_file']}")
                                    continue
                                
                                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                try:
                                    image = Image.open(mockup['image_path'])
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                    image.verify()
                                    
                                    # –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                    image = Image.open(mockup['image_path'])
                                    st.image(image, use_container_width=True, caption=f"–ú–æ–∫–∞–ø {i + j + 1}")
                                    
                                except Exception as img_error:
                                    st.error(f"‚ùå –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {mockup['image_file']}")
                                    st.write(f"**–û—à–∏–±–∫–∞:** {str(img_error)}")
                                    st.write(f"**–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** {file_size} –±–∞–π—Ç")
                                    st.write(f"**–ü—É—Ç—å:** {mockup['image_path']}")
                                    
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                                    with st.expander(f"‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –º–æ–∫–∞–ø–∞ {i + j + 1} (—Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω)"):
                                        metadata = mockup['metadata']
                                        
                                        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                        st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                                        st.write(f"‚Ä¢ –°—Ç–∏–ª—å: {metadata.get('mockup_style', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                        st.write(f"‚Ä¢ –¢–∏–ø –Ω–∞–Ω–µ—Å–µ–Ω–∏—è: {metadata.get('logo_application', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                        st.write(f"‚Ä¢ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {metadata.get('logo_placement', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                        st.write(f"‚Ä¢ –†–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞: {metadata.get('logo_size', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                                        
                                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                        if metadata.get('special_requirements'):
                                            st.write(f"**–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:** {metadata['special_requirements']}")
                                        
                                        # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                                        created_time = datetime.fromtimestamp(mockup['created_time'])
                                        st.write(f"**–°–æ–∑–¥–∞–Ω:** {created_time.strftime('%d.%m.%Y %H:%M')}")
                                        
                                        st.warning("‚ö†Ô∏è –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω")
                                    continue
                        
                        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ expander –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        with st.expander(f"‚ÑπÔ∏è –î–µ—Ç–∞–ª–∏ –º–æ–∫–∞–ø–∞ {i + j + 1}"):
                            metadata = mockup['metadata']
                            
                            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            st.write("**–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                            st.write(f"‚Ä¢ –°—Ç–∏–ª—å: {metadata.get('mockup_style', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            st.write(f"‚Ä¢ –¢–∏–ø –Ω–∞–Ω–µ—Å–µ–Ω–∏—è: {metadata.get('logo_application', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            st.write(f"‚Ä¢ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {metadata.get('logo_placement', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            st.write(f"‚Ä¢ –†–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞: {metadata.get('logo_size', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            if metadata.get('special_requirements'):
                                st.write(f"**–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:** {metadata['special_requirements']}")
                            
                            # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                            created_time = datetime.fromtimestamp(mockup['created_time'])
                            st.write(f"**–°–æ–∑–¥–∞–Ω:** {created_time.strftime('%d.%m.%Y %H:%M')}")
                            
                            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
                            st.write(f"**–§–∞–π–ª:** {mockup['image_file']}")
                            st.write(f"**–†–∞–∑–º–µ—Ä:** {file_size} –±–∞–π—Ç")
                            st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {mockup.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                            
                            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            try:
                                if mockup.get('source') == 'session_state' and 'image_data' in mockup:
                                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ session_state
                                    import base64
                                    image_data = base64.b64decode(mockup['image_data'])
                                    st.download_button(
                                        label="üì• –°–∫–∞—á–∞—Ç—å",
                                        data=image_data,
                                        file_name=mockup['image_file'],
                                        mime="image/jpeg"
                                    )
                                else:
                                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
                                    with open(mockup['image_path'], "rb") as file:
                                        st.download_button(
                                            label="üì• –°–∫–∞—á–∞—Ç—å",
                                            data=file.read(),
                                            file_name=mockup['image_file'],
                                            mime="image/jpeg"
                                        )
                            except Exception as download_error:
                                st.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(download_error)}")
                    
                    except Exception as e:
                        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                        st.write(f"**–§–∞–π–ª:** {mockup['image_file']}")
                        st.write(f"**–ü—É—Ç—å:** {mockup['image_path']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–Ω–∏–∑—É
    st.markdown("---")
    st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –º–æ–∫–∞–ø–æ–≤", len(mockups_data))
    
    with col2:
        st.metric("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ", len(filtered_mockups))
    
    with col3:
        if mockups_data:
            latest = max(mockups_data, key=lambda x: x['created_time'])
            latest_time = datetime.fromtimestamp(latest['created_time'])
            st.metric("–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–∫–∞–ø", latest_time.strftime('%d.%m.%Y'))
    
    with col4:
        # –†–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        total_size = 0
        for mockup in mockups_data:
            try:
                total_size += os.path.getsize(mockup['image_path'])
            except:
                pass
        
        st.metric("–†–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏", f"{total_size / (1024*1024):.1f} –ú–ë")

def upload_to_google_drive(image_data: bytes, metadata: dict, description: str = ""):
    """Google Drive –æ—Ç–∫–ª—é—á–µ–Ω"""
    pass

def get_google_drive_mockups(limit: int = 50) -> list:
    """Google Drive –æ—Ç–∫–ª—é—á–µ–Ω"""
    return []

def upload_to_server(image_data: bytes, metadata: dict, description: str = ""):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–∫–∞–ø –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    if not SERVER_STORAGE_ENABLED:
        return
    
    try:
        from server_storage import get_server_storage
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Ä–≤–µ—Ä–∞
        storage = get_server_storage()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        filename = storage.save_mockup(image_data, metadata, description)
        if filename:
            print(f"‚úÖ –ú–æ–∫–∞–ø –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {filename}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")

def get_server_mockups(limit: int = 50) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∫–∞–ø–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    if not SERVER_STORAGE_ENABLED:
        return []
    
    try:
        from server_storage import get_server_storage
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Ä–≤–µ—Ä–∞
        storage = get_server_storage()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–∫–∞–ø–æ–≤
        mockups = storage.get_mockups_list(limit)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
        gallery_mockups = []
        for mockup in mockups:
            gallery_mockups.append({
                'image_file': mockup['filename'],
                'image_path': mockup['filepath'],
                'cache_key': mockup['id'],
                'metadata': mockup['metadata'],
                'created_time': mockup['created_time'],
                'source': 'server_storage',
                'image_data': mockup.get('image_data'),
                'web_url': mockup.get('web_url')
            })
        
        return gallery_mockups
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∫–∞–ø–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return []

def upload_to_ftp(image_data: bytes, metadata: dict, description: str = ""):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–∫–∞–ø –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä —Å —Å–∂–∞—Ç–∏–µ–º"""
    if not FTP_ENABLED:
        return
    
    try:
        from ftp_uploader import get_ftp_uploader
        from image_processor import ImageProcessor
        
        # –ü–æ–ª—É—á–∞–µ–º FTP –∑–∞–≥—Ä—É–∑—á–∏–∫
        uploader = get_ftp_uploader()
        if not uploader:
            return
        
        # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        processor = ImageProcessor()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ PIL Image
        from PIL import Image
        import io
        image = Image.open(io.BytesIO(image_data))
        
        # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 1200x1200, –∫–∞—á–µ—Å—Ç–≤–æ 85%)
        compressed_data = processor.compress_for_ftp(image, max_size=(1200, 1200), quality=85)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–æ –∏ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è
        original_size = processor.get_compressed_size(image_data)
        compressed_size = processor.get_compressed_size(compressed_data)
        # –°–∂–∞—Ç–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ FTP (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
        filename = uploader.upload_mockup(compressed_data, metadata, description)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ FTP: {e}")

def get_ftp_mockups(limit: int = 50) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∫–∞–ø–æ–≤ —Å FTP —Å–µ—Ä–≤–µ—Ä–∞"""
    if not FTP_ENABLED:
        return []
    
    try:
        from ftp_uploader import get_ftp_uploader
        import requests
        
        # –ü–æ–ª—É—á–∞–µ–º FTP –∑–∞–≥—Ä—É–∑—á–∏–∫
        uploader = get_ftp_uploader()
        if not uploader:
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–∫–∞–ø–æ–≤
        mockups = uploader.list_files()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–¥–æ—Å—Ç—É–ø
        gallery_mockups = []
        for mockup in mockups[:limit]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±
            try:
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
                response = requests.head(mockup['web_url'], timeout=5, headers=headers)
                if response.status_code == 200:
                    gallery_mockups.append({
                        'image_file': mockup['filename'],
                        'image_path': mockup['web_url'],
                        'cache_key': mockup['filename'].replace('.jpg', ''),
                        'metadata': mockup['metadata'],
                        'created_time': time.time(),  # FTP –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                        'source': 'ftp_upload',
                        'web_url': mockup['web_url']
                    })
                else:
                    print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±: {mockup['filename']} (HTTP {response.status_code})")
            except Exception as web_error:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞ –¥–ª—è {mockup['filename']}: {web_error}")
                continue
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö FTP –º–æ–∫–∞–ø–æ–≤: {len(gallery_mockups)}")
        return gallery_mockups
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∫–∞–ø–æ–≤ —Å FTP: {e}")
        return []

def show_gallery_statistics(mockups: list):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∞–ª–µ—Ä–µ–∏"""
    st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞–ª–µ—Ä–µ–∏")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    sources = {}
    styles = {}
    applications = {}
    total_size = 0
    
    for mockup in mockups:
        source = mockup.get('source', 'unknown')
        sources[source] = sources.get(source, 0) + 1
        
        metadata = mockup.get('metadata', {})
        style = metadata.get('mockup_style', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        application = metadata.get('logo_application', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        styles[style] = styles.get(style, 0) + 1
        applications[application] = applications.get(application, 0) + 1
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if 'optimized_size' in metadata:
            total_size += metadata['optimized_size']
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:**")
        for source, count in sources.items():
            st.write(f"- {source}: {count}")
        
        st.markdown("**–ü–æ —Å—Ç–∏–ª—è–º:**")
        for style, count in sorted(styles.items(), key=lambda x: x[1], reverse=True)[:5]:
            st.write(f"- {style}: {count}")
    
    with col2:
        st.markdown("**–ü–æ —Ç–∏–ø–∞–º –Ω–∞–Ω–µ—Å–µ–Ω–∏—è:**")
        for app, count in sorted(applications.items(), key=lambda x: x[1], reverse=True)[:5]:
            st.write(f"- {app}: {count}")
        
        if total_size > 0:
            st.markdown("**–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:**")
            st.write(f"- {total_size / (1024*1024):.2f} MB")

if __name__ == "__main__":
    main()
