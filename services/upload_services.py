"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
"""

import streamlit as st
import time
import os
import config
from ftp_uploader import FTPUploader
from server_storage import ServerStorage

def upload_to_server(image_data: bytes, metadata: dict, description: str = ""):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        if not config.SERVER_STORAGE_ENABLED:
            return
        
        storage = ServerStorage()
        filename = f"mockup_{int(time.time())}.jpg"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        success = storage.upload_image(image_data, filename, metadata)
        
        if success:
            st.success(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {filename}")
        else:
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")

def get_server_mockups(limit: int = 50) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–∫–∞–ø–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        if not config.SERVER_STORAGE_ENABLED:
            return []
        
        storage = ServerStorage()
        return storage.list_images(limit)
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∫–∞–ø–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return []

def upload_to_ftp(image_data: bytes, metadata: dict, description: str = ""):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä —Å —Å–∂–∞—Ç–∏–µ–º"""
    try:
        if not config.FTP_ENABLED:
            return
        
        from image_processor import ImageProcessor
        
        # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        processor = ImageProcessor()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ PIL Image
        from PIL import Image
        import io
        image = Image.open(io.BytesIO(image_data))
        
        # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 1200x1200, –∫–∞—á–µ—Å—Ç–≤–æ 85%)
        compressed_data = processor.compress_for_ftp(image, max_size=(1200, 1200), quality=85)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–æ –∏ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è
        original_size = processor.get_compressed_size(image_data)
        compressed_size = processor.get_compressed_size(compressed_data)
        st.info(f"üìä –°–∂–∞—Ç–∏–µ: {original_size} ‚Üí {compressed_size}")
        
        from ftp_uploader import get_ftp_uploader
        ftp_uploader = get_ftp_uploader()
        if not ftp_uploader:
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å FTP –∑–∞–≥—Ä—É–∑—á–∏–∫")
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP
        if not ftp_uploader.connect():
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = int(time.time())
        filename = f"mockup_{timestamp}.jpg"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ FTP
        success = ftp_uploader.upload_image(compressed_data, filename, metadata)
        
        if success:
            st.success(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ FTP: {filename} ({compressed_size})")
        else:
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ FTP")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        ftp_uploader.disconnect()
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ FTP: {e}")

def get_ftp_mockups(limit: int = 50) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–∫–∞–ø–æ–≤ —Å FTP —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        if not config.FTP_ENABLED:
            return []
        
        from ftp_uploader import get_ftp_uploader
        ftp_uploader = get_ftp_uploader()
        if not ftp_uploader:
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å FTP –∑–∞–≥—Ä—É–∑—á–∏–∫")
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP
        if not ftp_uploader.connect():
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É")
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files = ftp_uploader.list_files(limit)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        ftp_uploader.disconnect()
        
        return files
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∫–∞–ø–æ–≤ —Å FTP: {e}")
        return []

def upload_to_google_drive(image_data: bytes, metadata: dict, description: str = ""):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Google Drive (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
    pass

def get_google_drive_mockups(limit: int = 50) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–∫–∞–ø–æ–≤ –∏–∑ Google Drive (–æ—Ç–∫–ª—é—á–µ–Ω–æ)"""
    return []
