#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–∫–∞–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∞–ª–µ—Ä–µ–∏
"""

import ftplib
import os
import json
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont
import io
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
load_dotenv('ftp_config.env')

def create_test_mockup():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–∫–∞–ø –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä"""
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–æ–∫–∞–ø–∞")
    print("============================")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        width, height = 512, 512
        image = Image.new('RGB', (width, height), color='lightblue')
        draw = ImageDraw.Draw(image)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
        except:
            # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
            font = ImageFont.load_default()
        
        text = "–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–∫–∞–ø\nAI Mockup Generator\n2024"
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (width - text_width) // 2
        y = (height - text_height) // 2
        
        draw.text((x, y), text, fill='darkblue', font=font)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É
        draw.rectangle([10, 10, width-10, height-10], outline='darkblue', width=3)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        img_buffer = io.BytesIO()
        image.save(img_buffer, format='JPEG', quality=85)
        img_data = img_buffer.getvalue()
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {len(img_data)} –±–∞–π—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "mockup_style": "–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–∏–ª—å",
            "logo_application": "–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ",
            "logo_placement": "–¶–µ–Ω—Ç—Ä",
            "logo_size": "–°—Ä–µ–¥–Ω–∏–π",
            "logo_color": "–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π",
            "product_color": "–°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π",
            "product_angle": "–ü—Ä—è–º–æ–π",
            "special_requirements": "–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–∫–∞–ø –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∞–ª–µ—Ä–µ–∏"
        }
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP
        ftp = ftplib.FTP()
        ftp.connect(os.getenv('FTP_HOST'), 21)
        ftp.login(os.getenv('FTP_USERNAME'), os.getenv('FTP_PASSWORD'))
        print("‚úÖ FTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É mockups
        ftp.cwd('/public_html/mockups')
        print("‚úÖ –ü–µ—Ä–µ—à–ª–∏ –≤ –ø–∞–ø–∫—É mockups")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        image_filename = f"test_mockup_{timestamp}.jpg"
        json_filename = f"test_mockup_{timestamp}.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img_buffer = io.BytesIO(img_data)
        ftp.storbinary(f'STOR {image_filename}', img_buffer)
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {image_filename}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        json_data = {
            "filename": image_filename,
            "metadata": metadata,
            "created_at": datetime.now().isoformat(),
            "source": "test_creation"
        }
        
        json_buffer = io.BytesIO(json.dumps(json_data, ensure_ascii=False, indent=2).encode('utf-8'))
        ftp.storbinary(f'STOR {json_filename}', json_buffer)
        print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {json_filename}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
        print("\nüìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ mockups:")
        contents = []
        ftp.retrlines('LIST', contents.append)
        
        for item in contents:
            print(f"  {item}")
        
        ftp.quit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–¥–æ—Å—Ç—É–ø
        web_url = f"http://search.headcorn.pro/mockups/{image_filename}"
        print(f"\nüåê –í–µ–±-–¥–æ—Å—Ç—É–ø: {web_url}")
        
        try:
            import requests
            response = requests.get(web_url, timeout=10)
            if response.status_code == 200:
                print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±")
            else:
                print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: HTTP {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    create_test_mockup()
