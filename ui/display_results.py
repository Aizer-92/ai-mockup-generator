"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–∞–ø–æ–≤
"""

import streamlit as st
import time
from PIL import Image
import io
from image_processor import ImageProcessor

def display_results(result: dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
    st.session_state.last_result = result
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–∫–∞–ø—ã –≤ session_state –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
    if "generated_mockups" not in st.session_state:
        st.session_state.generated_mockups = []
    
    mockups = result.get("mockups", {})
    
    if not mockups:
        st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–æ–∫–∞–ø–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        st.error(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {list(result.keys())}")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–æ–∫–∞–ø—ã –≤ session_state
    if "gemini_mockups" in mockups:
        for mockup in mockups["gemini_mockups"]:
            if "image_data" in mockup:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
                gallery_entry = {
                    "image_data": mockup["image_data"],
                    "metadata": {
                        "mockup_style": result.get("style", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "logo_application": result.get("logo_application", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "logo_placement": result.get("logo_position", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "logo_size": result.get("logo_size", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "logo_color": result.get("logo_color", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "product_color": result.get("product_color", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "product_angle": result.get("product_angle", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "special_requirements": result.get("custom_prompt", "")
                    },
                    "timestamp": time.time(),
                    "description": mockup.get("description", "")
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ session_state (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
                if gallery_entry not in st.session_state.generated_mockups:
                    st.session_state.generated_mockups.append(gallery_entry)
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–∫–∞–ø—ã
    display_mockups_dynamically(mockups, result)
    
    # –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã (–≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
    if "gemini_mockups" in mockups:
        for mockup in mockups["gemini_mockups"]:
            if "image_data" in mockup:
                gallery_entry = {
                    "image_data": mockup["image_data"],
                    "metadata": {
                        "style": mockup.get("style", "unknown"),
                        "logo_application": mockup.get("logo_application", "unknown"),
                        "custom_prompt": mockup.get("custom_prompt", ""),
                        "product_color": mockup.get("product_color", "–±–µ–ª—ã–π"),
                        "product_angle": mockup.get("product_angle", "—Å–ø–µ—Ä–µ–¥–∏"),
                        "created_time": time.time()
                    }
                }
                
                # Google Drive –æ—Ç–∫–ª—é—á–µ–Ω
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                from services.upload_services import upload_to_server
                upload_to_server(mockup["image_data"], gallery_entry["metadata"], mockup.get("description", ""))
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ FTP –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                from services.upload_services import upload_to_ftp
                upload_to_ftp(mockup["image_data"], gallery_entry["metadata"], mockup.get("description", ""))

def display_mockups_dynamically(mockups: dict, result: dict):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–∫–∞–ø–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ mockups –Ω–µ –ø—É—Å—Ç–æ–π
    if not mockups:
        st.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: 'mockups'")
        st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ session_state
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ", help="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–æ–∫–∞–ø–∞–º–∏
            keys_to_clear = [
                'last_result', 'mockup_containers', 'generated_mockups',
                'gallery_cache', 'regenerate_params', 'batch_results'
            ]
            for key in keys_to_clear:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ fallback
    fallback_used = mockups.get("fallback_used", False)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if "mockup_containers" not in st.session_state:
        st.session_state.mockup_containers = {}
    
    # Gemini –º–æ–∫–∞–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "gemini_mockups" in mockups:
        gemini_mockups = mockups["gemini_mockups"]
        
        if gemini_mockups:
            for i, mockup in enumerate(gemini_mockups):
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                container_key = f"mockup_{i}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if container_key not in st.session_state.mockup_containers:
                    st.session_state.mockup_containers[container_key] = st.empty()
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                mockup_container = st.session_state.mockup_containers[container_key]
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–∫–∞–ø –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
                with mockup_container.container():
                    if "description" in mockup:
                        st.write(f"**–í–∞—Ä–∏–∞–Ω—Ç {i+1}:** {mockup['description']}")
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç Gemini
                    if "image_data" in mockup:
                        try:
                            # image_data —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è bytes –æ—Ç Gemini
                            image_data = mockup["image_data"]
                            image = Image.open(io.BytesIO(image_data))
                            
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
                            if image.mode in ('RGBA', 'LA', 'P'):
                                processor = ImageProcessor()
                                image = processor.convert_to_rgb(image)
                                # –û–±–Ω–æ–≤–ª—è–µ–º image_data
                                img_byte_arr = io.BytesIO()
                                image.save(img_byte_arr, format='JPEG', quality=95)
                                image_data = img_byte_arr.getvalue()
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            st.image(image_data, use_column_width=True)
                            
                            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                                st.download_button(
                                    label="–°–∫–∞—á–∞—Ç—å",
                                    data=image_data,
                                    file_name=f"mockup_{i+1}.jpg",
                                    mime="image/jpeg",
                                    use_container_width=True
                                )
                            
                            with col2:
                                # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                                if st.button(f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–∫–∞–ø {i+1}", use_container_width=True):
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                                    st.session_state.regenerate_params = {
                                        "mockup_index": i,
                                        "original_mockup": mockup,
                                        "original_result": result,
                                        "container_key": container_key
                                    }
                                    st.rerun()
                            
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                            st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    
    # Fallback –º–æ–∫–∞–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if "fallback_mockups" in mockups and mockups["fallback_mockups"]:
        st.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–∫–∞–ø—ã (Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        
        for i, mockup in enumerate(mockups["fallback_mockups"]):
            if "image_path" in mockup:
                try:
                    with open(mockup["image_path"], "rb") as f:
                        image_data = f.read()
                    
                    st.image(image_data, use_column_width=True)
                    
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è fallback
                    st.download_button(
                        label=f"–°–∫–∞—á–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –º–æ–∫–∞–ø {i+1}",
                        data=image_data,
                        file_name=f"fallback_mockup_{i+1}.jpg",
                        mime="image/jpeg"
                    )
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–æ–∫–∞–ø–∞: {e}")

def regenerate_mockup_dynamically(mockup_index: int, original_mockup: dict, original_result: dict, container_key: str):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞–ø–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    mockup_container = st.session_state.mockup_containers[container_key]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    with mockup_container.container():
        st.info(f"üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫–∞–ø–∞ {mockup_index + 1}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_text.text("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gemini...")
            progress_bar.progress(20)
            time.sleep(0.5)
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            from mockup_generator import MockupGenerator
            generator = MockupGenerator()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            mockup_style = original_result.get("style", "modern")
            logo_application = original_result.get("logo_application", "embroidery")
            custom_prompt = original_result.get("custom_prompt", "")
            product_color = original_result.get("product_color", "–±–µ–ª—ã–π")
            product_angle = original_result.get("product_angle", "—Å–ø–µ—Ä–µ–¥–∏")
            logo_position = original_result.get("logo_position", "—Ü–µ–Ω—Ç—Ä")
            logo_size = original_result.get("logo_size", "—Å—Ä–µ–¥–Ω–∏–π")
            logo_color = original_result.get("logo_color", "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_text.text("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –º–æ–∫–∞–ø–∞...")
            progress_bar.progress(50)
            time.sleep(0.5)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–æ–∫–∞–ø —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            new_result = generator.generate_mockup(
                st.session_state.product_image, st.session_state.logo_image,
                mockup_style, logo_application, custom_prompt, product_color,
                product_angle, logo_position, logo_size, logo_color
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status_text.text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            progress_bar.progress(80)
            time.sleep(0.5)
            
            if new_result and "mockups" in new_result and new_result["mockups"]:
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                update_mockup_display(mockup_index, new_result["mockups"][0], new_result, container_key)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                status_text.text("‚úÖ –ú–æ–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω!")
                progress_bar.progress(100)
                time.sleep(1)
                
                # –û—á–∏—â–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                status_text.empty()
                progress_bar.empty()
                
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–∞–ø–∞")
                st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                
        except Exception as e:
            st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏: {e}")
            st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")

def update_mockup_display(mockup_index: int, new_mockup: dict, result: dict, container_key: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–∫–∞–ø–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    mockup_container = st.session_state.mockup_containers[container_key]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with mockup_container.container():
        if "description" in new_mockup:
            st.write(f"**–í–∞—Ä–∏–∞–Ω—Ç {mockup_index + 1}:** {new_mockup['description']}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if "image_data" in new_mockup:
            try:
                # image_data —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è bytes –æ—Ç Gemini
                image_data = new_mockup["image_data"]
                image = Image.open(io.BytesIO(image_data))
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JPEG
                if image.mode in ('RGBA', 'LA', 'P'):
                    processor = ImageProcessor()
                    image = processor.convert_to_rgb(image)
                    # –û–±–Ω–æ–≤–ª—è–µ–º image_data
                    img_byte_arr = io.BytesIO()
                    image.save(img_byte_arr, format='JPEG', quality=95)
                    image_data = img_byte_arr.getvalue()
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                st.image(image_data, use_column_width=True)
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                col1, col2 = st.columns(2)
                
                with col1:
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å",
                        data=image_data,
                        file_name=f"mockup_{mockup_index + 1}.jpg",
                        mime="image/jpeg",
                        use_container_width=True
                    )
                
                with col2:
                    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    if st.button(f"–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–∫–∞–ø {mockup_index + 1}", use_container_width=True):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                        st.session_state.regenerate_params = {
                            "mockup_index": mockup_index,
                            "original_mockup": new_mockup,
                            "original_result": result,
                            "container_key": container_key
                        }
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                        regenerate_mockup_dynamically(mockup_index, new_mockup, result, container_key)
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
