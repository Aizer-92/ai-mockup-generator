"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import streamlit as st
from PIL import Image
from image_processor import ImageProcessor

def image_upload_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    st.write("**üì¶ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:**")
    product_image = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        type=['jpg', 'jpeg', 'png', 'webp'],
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫–∞–ø–∞"
    )
    
    if product_image is not None:
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            image = Image.open(product_image)
            if image.mode in ('RGBA', 'LA', 'P'):
                processor = ImageProcessor()
                image = processor.convert_to_rgb(image)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
            st.session_state.product_image = image
            st.success("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            st.image(image, width=200, caption="–ü—Ä–µ–≤—å—é —Ç–æ–≤–∞—Ä–∞")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    st.write("**üè∑Ô∏è –õ–æ–≥–æ—Ç–∏–ø:**")
    logo_image = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø",
        type=['jpg', 'jpeg', 'png', 'webp'],
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä"
    )
    
    if logo_image is not None:
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            image = Image.open(logo_image)
            if image.mode in ('RGBA', 'LA', 'P'):
                processor = ImageProcessor()
                image = processor.convert_to_rgb(image)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
            st.session_state.logo_image = image
            st.success("‚úÖ –õ–æ–≥–æ—Ç–∏–ø –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            st.image(image, width=200, caption="–ü—Ä–µ–≤—å—é –ª–æ–≥–æ—Ç–∏–ø–∞")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    st.write("**üé® –ü–∞—Ç—Ç–µ—Ä–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):**")
    pattern_image = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω",
        type=['jpg', 'jpeg', 'png', 'webp'],
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è —Ä–∏—Å—É–Ω–∫–∞"
    )
    
    if pattern_image is not None:
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            image = Image.open(pattern_image)
            if image.mode in ('RGBA', 'LA', 'P'):
                processor = ImageProcessor()
                image = processor.convert_to_rgb(image)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
            st.session_state.pattern_image = image
            st.success("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            st.image(image, width=200, caption="–ü—Ä–µ–≤—å—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")

def batch_image_upload_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    st.write("**üì¶ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:**")
    product_images = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤",
        type=['jpg', 'jpeg', 'png', 'webp'],
        accept_multiple_files=True,
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
    )
    
    if product_images:
        try:
            processed_images = []
            for i, img in enumerate(product_images):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                image = Image.open(img)
                if image.mode in ('RGBA', 'LA', 'P'):
                    processor = ImageProcessor()
                    image = processor.convert_to_rgb(image)
                
                processed_images.append(image)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
            st.session_state.batch_product_images = processed_images
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            cols = st.columns(min(len(processed_images), 4))
            for i, img in enumerate(processed_images):
                with cols[i % 4]:
                    st.image(img, width=100, caption=f"–¢–æ–≤–∞—Ä {i+1}")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    st.write("**üè∑Ô∏è –õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:**")
    logo_image = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø",
        type=['jpg', 'jpeg', 'png', 'webp'],
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
    )
    
    if logo_image is not None:
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            image = Image.open(logo_image)
            if image.mode in ('RGBA', 'LA', 'P'):
                processor = ImageProcessor()
                image = processor.convert_to_rgb(image)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
            st.session_state.batch_logo_image = image
            st.success("‚úÖ –õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            st.image(image, width=200, caption="–ü—Ä–µ–≤—å—é –ª–æ–≥–æ—Ç–∏–ø–∞")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    st.write("**üé® –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):**")
    pattern_image = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω",
        type=['jpg', 'jpeg', 'png', 'webp'],
        help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è —Ä–∏—Å—É–Ω–∫–∞ –Ω–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö"
    )
    
    if pattern_image is not None:
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            image = Image.open(pattern_image)
            if image.mode in ('RGBA', 'LA', 'P'):
                processor = ImageProcessor()
                image = processor.convert_to_rgb(image)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
            st.session_state.batch_pattern_image = image
            st.success("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
            st.image(image, width=200, caption="–ü—Ä–µ–≤—å—é –ø–∞—Ç—Ç–µ—Ä–Ω–∞")
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")

