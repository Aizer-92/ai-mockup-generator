"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∫–∞–ø–æ–≤
"""

import streamlit as st
import time
from PIL import Image
from image_processor import ImageProcessor

def batch_processing_interface():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∫–∞–ø–æ–≤"""
    
    st.subheader("üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if "batch_product_images" in st.session_state and "batch_logo_image" in st.session_state:
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.write("**üì¶ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:**")
            if st.session_state.batch_product_images:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–∫—É —Ç–æ–≤–∞—Ä–æ–≤
                cols = st.columns(2)
                for i, img in enumerate(st.session_state.batch_product_images):
                    with cols[i % 2]:
                        st.image(img, width=60)
                        st.caption(f"–¢–æ–≤–∞—Ä {i+1}")
        
        with col2:
            st.write("**üè∑Ô∏è –õ–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:**")
            st.image(st.session_state.batch_logo_image, width=80)
        
        with col3:
            st.write("**üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**")
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if "batch_pattern_image" in st.session_state:
                st.write("**–ü–∞—Ç—Ç–µ—Ä–Ω:**")
                st.image(st.session_state.batch_pattern_image, width=60)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collection_style = st.selectbox(
                "–°—Ç–∏–ª—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏",
                ["modern", "vintage", "minimalist", "luxury", "casual", "sporty"],
                index=0,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏"
            )
            
            product_color = st.selectbox(
                "–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                ["–±–µ–ª—ã–π", "—á–µ—Ä–Ω—ã–π", "—Å–µ—Ä—ã–π", "—Å–∏–Ω–∏–π", "–∫—Ä–∞—Å–Ω—ã–π", "–∑–µ–ª–µ–Ω—ã–π", "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ"],
                index=6,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"
            )
            
            logo_application = st.selectbox(
                "–¢–∏–ø –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞",
                ["–≤—ã—à–∏–≤–∫–∞", "–ø–µ—á–∞—Ç—å", "–∞–ø–ø–ª–∏–∫–∞—Ü–∏—è", "–≤—ã—à–∏–≤–∫–∞+–ø–µ—á–∞—Ç—å", "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ"],
                index=0,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞"
            )
            
            logo_position = st.selectbox(
                "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞",
                ["—Ü–µ–Ω—Ç—Ä", "–ª–µ–≤—ã–π –≤–µ—Ä—Ö", "–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö", "–ª–µ–≤—ã–π –Ω–∏–∑", "–ø—Ä–∞–≤—ã–π –Ω–∏–∑", "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ"],
                index=0,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞"
            )
            
            logo_size = st.selectbox(
                "–†–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞",
                ["–æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π", "–º–∞–ª–µ–Ω—å–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "–±–æ–ª—å—à–æ–π", "–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π", "–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ"],
                index=0,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞"
            )
            
            logo_color = st.selectbox(
                "–¶–≤–µ—Ç –ª–æ–≥–æ—Ç–∏–ø–∞",
                ["–∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ", "–±–µ–ª—ã–π", "—á–µ—Ä–Ω—ã–π", "—Ü–≤–µ—Ç–Ω–æ–π", "–º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π"],
                index=0,
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ª–æ–≥–æ—Ç–∏–ø–∞"
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            add_tag = st.checkbox("–î–æ–±–∞–≤–∏—Ç—å –±–∏—Ä–∫—É", help="–î–æ–±–∞–≤–∏—Ç—å –±–∏—Ä–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ")
            add_person = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏", help="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —á–µ–ª–æ–≤–µ–∫–µ")
            add_badge = st.checkbox("–î–æ–±–∞–≤–∏—Ç—å —à–∏–ª—å–¥–∏–∫", help="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —à–∏–ª—å–¥–∏–∫")
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–∫–∞–ø—ã", type="primary", use_container_width=True):
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            from batch_processor import BatchProcessor
            batch_processor = BatchProcessor()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collection_settings = {
                "product_color": product_color,
                "collection_style": collection_style,
            }
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
            logo_settings = {
                "application": logo_application,
                "position": logo_position,
                "size": logo_size,
                "color": logo_color
            }
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            additional_options = {
                "add_tag": add_tag,
                "add_person": add_person,
                "add_badge": add_badge
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
            pattern_image = st.session_state.get("batch_pattern_image", None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            with st.spinner("üîÑ –ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–∞–ø–æ–≤..."):
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
                    analysis_result = batch_processor.analyze_collection(
                        st.session_state.batch_product_images,
                        st.session_state.batch_logo_image,
                        collection_settings,
                        logo_settings,
                        additional_options,
                        pattern_image
                    )
                    
                    if analysis_result["status"] == "success":
                        st.success("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                        with st.expander("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"):
                            st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:** {len(analysis_result['individual_prompts'])}")
                            st.write(f"**–°—Ç–∏–ª—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏:** {analysis_result['collection_style']}")
                            st.write(f"**–¢–∏–ø –Ω–∞–Ω–µ—Å–µ–Ω–∏—è:** {analysis_result['logo_application']}")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
                            with st.expander("üìù –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤"):
                                for i, prompt_data in enumerate(analysis_result["individual_prompts"]):
                                    st.write(f"**–¢–æ–≤–∞—Ä {i+1}:**")
                                    st.write(f"- –°—Ç–∏–ª—å: {prompt_data.get('style', collection_style)}")
                                    st.write(f"- –ù–∞–Ω–µ—Å–µ–Ω–∏–µ: {prompt_data.get('logo_application', 'embroidery')}")
                                    st.write(f"- –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {prompt_data.get('logo_position', '—Ü–µ–Ω—Ç—Ä')}")
                                    st.write(f"- –†–∞–∑–º–µ—Ä: {prompt_data.get('logo_size', '—Å—Ä–µ–¥–Ω–∏–π')}")
                                    if prompt_data.get('reasoning'):
                                        st.write(f"- –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {prompt_data['reasoning']}")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–∞–ø—ã
                        batch_result = batch_processor.process_batch(
                            st.session_state.batch_product_images,
                            st.session_state.batch_logo_image,
                            analysis_result["individual_prompts"],
                            logo_settings,
                            additional_options,
                            pattern_image
                        )
                        
                        if batch_result["status"] == "success":
                            st.success(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {batch_result['processing_time']:.2f} —Å–µ–∫—É–Ω–¥")
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            st.session_state.batch_results = batch_result
                            
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            display_batch_results(batch_result)
                            
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                            st.error(batch_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                    
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
                        st.error(analysis_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
                
                except Exception as e:
                    st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                    st.error("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    else:
        st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

def display_batch_results(batch_result: dict):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    if "results" not in batch_result:
        st.error("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    results = batch_result["results"]
    
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    st.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    for i, result in enumerate(results):
        with st.expander(f"–¢–æ–≤–∞—Ä {i+1}", expanded=True):
            if result["status"] == "success":
                st.success(f"‚úÖ –¢–æ–≤–∞—Ä {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–∫–∞–ø—ã
                if "mockups" in result and result["mockups"]:
                    for j, mockup in enumerate(result["mockups"]):
                        if "image_data" in mockup:
                            st.image(mockup["image_data"], use_column_width=True)
                            
                            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                            st.download_button(
                                label=f"–°–∫–∞—á–∞—Ç—å –º–æ–∫–∞–ø {j+1}",
                                data=mockup["image_data"],
                                file_name=f"batch_mockup_{i+1}_{j+1}.jpg",
                                mime="image/jpeg"
                            )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                if "prompt_data" in result:
                    prompt_data = result["prompt_data"]
                    st.write(f"**–°—Ç–∏–ª—å:** {prompt_data.get('style', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    st.write(f"**–ù–∞–Ω–µ—Å–µ–Ω–∏–µ:** {prompt_data.get('logo_application', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    st.write(f"**–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** {prompt_data.get('logo_position', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    st.write(f"**–†–∞–∑–º–µ—Ä:** {prompt_data.get('logo_size', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ {i+1}")
                st.error(result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"))
    
    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", type="secondary"):
        if "batch_results" in st.session_state:
            del st.session_state.batch_results
        st.rerun()
