"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è –º–æ–∫–∞–ø–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
"""
import os
import json
import time
import base64
from typing import List, Dict, Optional, Tuple
from PIL import Image
import io
import streamlit as st
from config import FTP_ENABLED, SERVER_STORAGE_ENABLED
from ftp_uploader import get_ftp_uploader
from server_storage import get_server_storage

class OptimizedGallery:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è –º–æ–∫–∞–ø–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∞–ª–µ—Ä–µ–∏"""
        self.cache_key = "gallery_cache"
        self.cache_expiry = 300  # 5 –º–∏–Ω—É—Ç
        self.thumbnail_size = (200, 200)
        self.max_images_per_page = 20
        
    def get_cached_mockups(self) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–∫–∞–ø–æ–≤"""
        if self.cache_key in st.session_state:
            cache_data = st.session_state[self.cache_key]
            if time.time() - cache_data['timestamp'] < self.cache_expiry:
                return cache_data['mockups']
        return None
    
    def cache_mockups(self, mockups: List[Dict]):
        """–ö—ç—à–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∫–∞–ø–æ–≤"""
        st.session_state[self.cache_key] = {
            'mockups': mockups,
            'timestamp': time.time()
        }
    
    def get_all_mockups(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –º–æ–∫–∞–ø—ã –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_mockups = self.get_cached_mockups()
        if cached_mockups is not None:
            return cached_mockups[:limit]
        
        all_mockups = []
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–∫–∞–ø—ã —Å FTP —Å–µ—Ä–≤–µ—Ä–∞
        if FTP_ENABLED:
            ftp_mockups = self.get_ftp_mockups_optimized(limit // 2)
            all_mockups.extend(ftp_mockups)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–∫–∞–ø—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
        if SERVER_STORAGE_ENABLED:
            server_mockups = self.get_server_mockups_optimized(limit // 2)
            all_mockups.extend(server_mockups)
        
        # Google Drive –æ—Ç–∫–ª—é—á–µ–Ω
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        all_mockups.sort(key=lambda x: x.get('created_time', 0), reverse=True)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.cache_mockups(all_mockups)
        
        return all_mockups[:limit]
    
    def get_ftp_mockups_optimized(self, limit: int = 50) -> List[Dict]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫–∞–ø–æ–≤ —Å FTP"""
        try:
            ftp_uploader = get_ftp_uploader()
            if not ftp_uploader:
                return []
            
            mockups = ftp_uploader.list_files()
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            optimized_mockups = []
            for i, mockup in enumerate(mockups[:limit]):
                optimized_mockup = {
                    'id': mockup['filename'].replace('.jpg', ''),
                    'filename': mockup['filename'],
                    'web_url': mockup['web_url'],
                    'metadata': mockup.get('metadata', {}),
                    'created_time': self._extract_timestamp_from_filename(mockup['filename']),
                    'source': 'ftp',
                    'thumbnail_url': mockup['web_url'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ thumbnail
                    'size_optimized': True
                }
                optimized_mockups.append(optimized_mockup)
            
            return optimized_mockups
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∫–∞–ø–æ–≤ —Å FTP: {e}")
            return []
    
    def get_server_mockups_optimized(self, limit: int = 50) -> List[Dict]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫–∞–ø–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            server_storage = get_server_storage()
            mockups = server_storage.get_mockups_list(limit)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            optimized_mockups = []
            for mockup in mockups:
                optimized_mockup = {
                    'id': mockup['id'],
                    'filename': mockup['filename'],
                    'web_url': mockup['web_url'],
                    'metadata': mockup.get('metadata', {}),
                    'created_time': mockup.get('created_time', 0),
                    'source': 'server',
                    'thumbnail_url': mockup['web_url'],
                    'size_optimized': True
                }
                optimized_mockups.append(optimized_mockup)
            
            return optimized_mockups
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∫–∞–ø–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return []
    
    # Google Drive —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã
    
    def _extract_timestamp_from_filename(self, filename: str) -> float:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        try:
            # –§–æ—Ä–º–∞—Ç: mockup_20241201_123456_style.jpg
            parts = filename.split('_')
            if len(parts) >= 3:
                date_part = parts[1]  # 20241201
                time_part = parts[2]  # 123456
                datetime_str = f"{date_part}_{time_part}"
                dt = time.strptime(datetime_str, "%Y%m%d_%H%M%S")
                return time.mktime(dt)
        except:
            pass
        return time.time()
    
    def display_gallery(self, mockups: List[Dict], page: int = 0):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é –º–æ–∫–∞–ø–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        if not mockups:
            st.info("üìÅ –ì–∞–ª–µ—Ä–µ—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–∫–∞–ø–æ–≤, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Ö –∑–¥–µ—Å—å!")
            return
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        start_idx = page * self.max_images_per_page
        end_idx = start_idx + self.max_images_per_page
        page_mockups = mockups[start_idx:end_idx]
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–æ–∫–∞–ø—ã –≤ —Å–µ—Ç–∫–µ
        cols_per_row = 4
        for i in range(0, len(page_mockups), cols_per_row):
            cols = st.columns(cols_per_row)
            
            for j, col in enumerate(cols):
                if i + j < len(page_mockups):
                    mockup = page_mockups[i + j]
                    self._display_mockup_card(col, mockup)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        total_pages = (len(mockups) - 1) // self.max_images_per_page + 1
        if total_pages > 1:
            self._display_pagination(page, total_pages)
    
    def _display_mockup_card(self, col, mockup: Dict):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–æ–∫–∞–ø–∞"""
        with col:
            try:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                st.image(
                    mockup['web_url'],
                    caption=mockup['filename'],
                    use_column_width=True,
                    width=200
                )
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = mockup.get('metadata', {})
                style = metadata.get('mockup_style', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                application = metadata.get('logo_application', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                st.caption(f"**–°—Ç–∏–ª—å:** {style}")
                st.caption(f"**–ù–∞–Ω–µ—Å–µ–Ω–∏–µ:** {application}")
                st.caption(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {mockup['source']}")
                
                # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                if st.button("üóëÔ∏è", key=f"delete_{mockup['id']}", help="–£–¥–∞–ª–∏—Ç—å –º–æ–∫–∞–ø"):
                    self._delete_mockup(mockup)
                    st.rerun()
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–∫–∞–ø–∞: {e}")
    
    def _display_pagination(self, current_page: int, total_pages: int):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é"""
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col1:
            if current_page > 0:
                if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"):
                    st.session_state['gallery_page'] = current_page - 1
                    st.rerun()
        
        with col2:
            st.write(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}")
        
        with col3:
            if current_page < total_pages - 1:
                if st.button("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è"):
                    st.session_state['gallery_page'] = current_page + 1
                    st.rerun()
    
    def _delete_mockup(self, mockup: Dict):
        """–£–¥–∞–ª—è–µ—Ç –º–æ–∫–∞–ø"""
        try:
            if mockup['source'] == 'ftp':
                ftp_uploader = get_ftp_uploader()
                if ftp_uploader:
                    ftp_uploader.delete_file(mockup['filename'])
            elif mockup['source'] == 'server':
                server_storage = get_server_storage()
                server_storage.delete_mockup(mockup['filename'])
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            if self.cache_key in st.session_state:
                del st.session_state[self.cache_key]
            
            st.success(f"–ú–æ–∫–∞–ø {mockup['filename']} —É–¥–∞–ª–µ–Ω")
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–∫–∞–ø–∞: {e}")
    
    def apply_filters(self, mockups: List[Dict], 
                     style_filter: str = "–í—Å–µ",
                     application_filter: str = "–í—Å–µ",
                     date_filter: str = "–í—Å–µ") -> List[Dict]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Å–ø–∏—Å–∫—É –º–æ–∫–∞–ø–æ–≤"""
        filtered = mockups
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∏–ª—é
        if style_filter != "–í—Å–µ":
            filtered = [m for m in filtered 
                       if m.get('metadata', {}).get('mockup_style') == style_filter]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –Ω–∞–Ω–µ—Å–µ–Ω–∏—è
        if application_filter != "–í—Å–µ":
            filtered = [m for m in filtered 
                       if m.get('metadata', {}).get('logo_application') == application_filter]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
        if date_filter != "–í—Å–µ":
            from datetime import datetime, timedelta
            now = datetime.now()
            
            if date_filter == "–°–µ–≥–æ–¥–Ω—è":
                cutoff = now.replace(hour=0, minute=0, second=0, microsecond=0)
            elif date_filter == "–ó–∞ –Ω–µ–¥–µ–ª—é":
                cutoff = now - timedelta(days=7)
            elif date_filter == "–ó–∞ –º–µ—Å—è—Ü":
                cutoff = now - timedelta(days=30)
            
            filtered = [m for m in filtered 
                       if datetime.fromtimestamp(m.get('created_time', 0)) >= cutoff]
        
        return filtered
    
    def get_filter_options(self, mockups: List[Dict]) -> Tuple[List[str], List[str]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        styles = set()
        applications = set()
        
        for mockup in mockups:
            metadata = mockup.get('metadata', {})
            styles.add(metadata.get('mockup_style', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            applications.add(metadata.get('logo_application', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        
        return sorted(list(styles)), sorted(list(applications))

def get_optimized_gallery() -> OptimizedGallery:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≥–∞–ª–µ—Ä–µ–∏"""
    return OptimizedGallery()