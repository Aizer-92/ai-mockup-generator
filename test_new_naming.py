#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
"""

import ftplib
import os
import json
from datetime import datetime
from PIL import Image, ImageDraw, ImageFont
import io
from dotenv import load_dotenv
from ftp_uploader import FTPUploader

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
load_dotenv('ftp_config.env')

def test_new_naming():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
    print("===============================")
    
    try:
        # –°–æ–∑–¥–∞–µ–º FTP –∑–∞–≥—Ä—É–∑—á–∏–∫
        uploader = FTPUploader(
            os.getenv('FTP_HOST'),
            os.getenv('FTP_USERNAME'),
            os.getenv('FTP_PASSWORD'),
            os.getenv('FTP_REMOTE_PATH')
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not uploader.test_connection():
            print("‚ùå FTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        width, height = 512, 512
        image = Image.new('RGB', (width, height), color='lightgreen')
        draw = ImageDraw.Draw(image)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        try:
            font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
        except:
            font = ImageFont.load_default()
        
        text = "New Naming System\nAI Mockup Generator\nEnglish Names Only"
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (width - text_width) // 2
        y = (height - text_height) // 2
        
        draw.text((x, y), text, fill='darkgreen', font=font)
        draw.rectangle([10, 10, width-10, height-10], outline='darkgreen', width=3)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        img_buffer = io.BytesIO()
        image.save(img_buffer, format='JPEG', quality=85)
        img_data = img_buffer.getvalue()
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {len(img_data)} –±–∞–π—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        metadata = {
            "mockup_style": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π",
            "logo_application": "–í—ã—à–∏–≤–∫–∞",
            "logo_placement": "–¶–µ–Ω—Ç—Ä",
            "logo_size": "–°—Ä–µ–¥–Ω–∏–π",
            "logo_color": "–ó–µ–ª–µ–Ω—ã–π",
            "product_color": "–°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π",
            "product_angle": "–ü—Ä—è–º–æ–π",
            "special_requirements": "–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–∫–∞–ø
        filename = uploader.upload_mockup(img_data, metadata, "–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è")
        
        if filename:
            print(f"‚úÖ –ú–æ–∫–∞–ø –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–¥–æ—Å—Ç—É–ø
            web_url = f"http://search.headcorn.pro/mockups/{filename}"
            print(f"üåê –í–µ–±-–¥–æ—Å—Ç—É–ø: {web_url}")
            
            try:
                import requests
                response = requests.get(web_url, timeout=10)
                if response.status_code == 200:
                    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±")
                else:
                    print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: HTTP {response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ–±-–¥–æ—Å—Ç—É–ø–∞: {e}")
            
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∫–∞–ø–∞")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    test_new_naming()
